
main.elf:     file format elf32-littlearm


Disassembly of section .text:

08000000 <g_pfnVectors>:
 8000000:	00 00 01 20 e5 01 00 08 00 00 00 00 00 00 00 00     ... ............
 8000010:	e1 01 00 08 e1 01 00 08 e1 01 00 08 00 00 00 00     ................
	...
 800002c:	e1 01 00 08 e1 01 00 08 00 00 00 00 e1 01 00 08     ................
 800003c:	e1 01 00 08 e1 01 00 08 e1 01 00 08 e1 01 00 08     ................
 800004c:	e1 01 00 08 e1 01 00 08 e1 01 00 08 e1 01 00 08     ................
 800005c:	e1 01 00 08 e1 01 00 08 e1 01 00 08 e1 01 00 08     ................
 800006c:	e1 01 00 08 e1 01 00 08 e1 01 00 08 e1 01 00 08     ................
 800007c:	e1 01 00 08 e1 01 00 08 e1 01 00 08 e1 01 00 08     ................
 800008c:	e1 01 00 08 e1 01 00 08 e1 01 00 08 e1 01 00 08     ................
 800009c:	e1 01 00 08 e1 01 00 08 e1 01 00 08 e1 01 00 08     ................
 80000ac:	e1 01 00 08 e1 01 00 08 e1 01 00 08 e1 01 00 08     ................
 80000bc:	e1 01 00 08 e1 01 00 08 e1 01 00 08 e1 01 00 08     ................
 80000cc:	e1 01 00 08 e1 01 00 08 e1 01 00 08 e1 01 00 08     ................
 80000dc:	e1 01 00 08 e1 01 00 08 e1 01 00 08 e1 01 00 08     ................
 80000ec:	e1 01 00 08 e1 01 00 08 e1 01 00 08 e1 01 00 08     ................
 80000fc:	e1 01 00 08 e1 01 00 08 e1 01 00 08 e1 01 00 08     ................
 800010c:	e1 01 00 08 e1 01 00 08 e1 01 00 08 e1 01 00 08     ................
 800011c:	e1 01 00 08 e1 01 00 08 e1 01 00 08 e1 01 00 08     ................
 800012c:	e1 01 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
 80001dc:	5f f8 e0 f1                                         _...

080001e0 <Default_Handler>:
#pragma weak DMA2_Channel3_IRQHandler	= Default_Handler
#pragma weak DMA2_Channel4_5_IRQHandler	= Default_Handler

void Default_Handler(void)
{
while (1) {}
 80001e0:	e7fe      	b.n	80001e0 <Default_Handler>
 80001e2:	bf00      	nop

080001e4 <Reset_Handler>:
	/* zero the bss segment */
	dst = &_sbss;
	while(dst < &_ebss)
		*(dst++) = 0;
}
void Reset_Handler(void) {
 80001e4:	4668      	mov	r0, sp
 80001e6:	f020 0107 	bic.w	r1, r0, #7
 80001ea:	468d      	mov	sp, r1
void __Init_Data(void) {
	unsigned long *src, *dst;
	/* copy the data segment into ram */
	src = &_sidata;
	dst = &_sdata;
	if (src != dst)
 80001ec:	4814      	ldr	r0, [pc, #80]	; (8000240 <Reset_Handler+0x5c>)
 80001ee:	4915      	ldr	r1, [pc, #84]	; (8000244 <Reset_Handler+0x60>)
	/* zero the bss segment */
	dst = &_sbss;
	while(dst < &_ebss)
		*(dst++) = 0;
}
void Reset_Handler(void) {
 80001f0:	b508      	push	{r3, lr}
void __Init_Data(void) {
	unsigned long *src, *dst;
	/* copy the data segment into ram */
	src = &_sidata;
	dst = &_sdata;
	if (src != dst)
 80001f2:	4281      	cmp	r1, r0
 80001f4:	d009      	beq.n	800020a <Reset_Handler+0x26>
		while(dst < &_edata)
 80001f6:	4b14      	ldr	r3, [pc, #80]	; (8000248 <Reset_Handler+0x64>)
 80001f8:	4298      	cmp	r0, r3
 80001fa:	d206      	bcs.n	800020a <Reset_Handler+0x26>
			*(dst++) = *(src++);
 80001fc:	43c2      	mvns	r2, r0
 80001fe:	4413      	add	r3, r2
 8000200:	f023 0203 	bic.w	r2, r3, #3
 8000204:	3204      	adds	r2, #4
 8000206:	f000 feb7 	bl	8000f78 <memcpy>
	/* zero the bss segment */
	dst = &_sbss;
	while(dst < &_ebss)
 800020a:	4810      	ldr	r0, [pc, #64]	; (800024c <Reset_Handler+0x68>)
 800020c:	4b10      	ldr	r3, [pc, #64]	; (8000250 <Reset_Handler+0x6c>)
 800020e:	4298      	cmp	r0, r3
 8000210:	d207      	bcs.n	8000222 <Reset_Handler+0x3e>
		*(dst++) = 0;
 8000212:	43c2      	mvns	r2, r0
 8000214:	4413      	add	r3, r2
 8000216:	f023 0203 	bic.w	r2, r3, #3
 800021a:	3204      	adds	r2, #4
 800021c:	2100      	movs	r1, #0
 800021e:	f000 ff21 	bl	8001064 <memset>
}
void Reset_Handler(void) {
	__Init_Data(); /* Initialize memory, data and bss */
	extern u32 _isr_vectors_offs; /* the offset to the vector table in ram */
	SCB->VTOR = 0x08000000 | ((u32)&_isr_vectors_offs & (u32)0x1FFFFF80); /* set interrupt vector table address */
 8000222:	4b0c      	ldr	r3, [pc, #48]	; (8000254 <Reset_Handler+0x70>)
 8000224:	4a0c      	ldr	r2, [pc, #48]	; (8000258 <Reset_Handler+0x74>)
 8000226:	f023 4368 	bic.w	r3, r3, #3892314112	; 0xe8000000
 800022a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800022e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000232:	6093      	str	r3, [r2, #8]
	SystemInit(); /* configure the clock */
 8000234:	f000 f8e0 	bl	80003f8 <SystemInit>
	main(); /* start execution of the program */
 8000238:	f000 f838 	bl	80002ac <main>
	while(1) {}
 800023c:	e7fe      	b.n	800023c <Reset_Handler+0x58>
 800023e:	bf00      	nop
 8000240:	20000000 	.word	0x20000000
 8000244:	08001100 	.word	0x08001100
 8000248:	20000028 	.word	0x20000028
 800024c:	20000028 	.word	0x20000028
 8000250:	20000030 	.word	0x20000030
 8000254:	00000000 	.word	0x00000000
 8000258:	e000ed00 	.word	0xe000ed00

0800025c <__Init_Data>:
void __Init_Data(void) {
	unsigned long *src, *dst;
	/* copy the data segment into ram */
	src = &_sidata;
	dst = &_sdata;
	if (src != dst)
 800025c:	490e      	ldr	r1, [pc, #56]	; (8000298 <__Init_Data+0x3c>)
 800025e:	480f      	ldr	r0, [pc, #60]	; (800029c <__Init_Data+0x40>)
 0, 0, 0, 0, 0,
 0, 0, 0,
 (intfunc)0xF1E0F85F
/* @0x1E0. This is for boot in RAM mode for STM32F10x High Density devices. */
};
void __Init_Data(void) {
 8000260:	b508      	push	{r3, lr}
	unsigned long *src, *dst;
	/* copy the data segment into ram */
	src = &_sidata;
	dst = &_sdata;
	if (src != dst)
 8000262:	4281      	cmp	r1, r0
 8000264:	d009      	beq.n	800027a <__Init_Data+0x1e>
		while(dst < &_edata)
 8000266:	4b0e      	ldr	r3, [pc, #56]	; (80002a0 <__Init_Data+0x44>)
 8000268:	4298      	cmp	r0, r3
 800026a:	d206      	bcs.n	800027a <__Init_Data+0x1e>
			*(dst++) = *(src++);
 800026c:	43c2      	mvns	r2, r0
 800026e:	441a      	add	r2, r3
 8000270:	f022 0203 	bic.w	r2, r2, #3
 8000274:	3204      	adds	r2, #4
 8000276:	f000 fe7f 	bl	8000f78 <memcpy>
	/* zero the bss segment */
	dst = &_sbss;
	while(dst < &_ebss)
 800027a:	480a      	ldr	r0, [pc, #40]	; (80002a4 <__Init_Data+0x48>)
 800027c:	4b0a      	ldr	r3, [pc, #40]	; (80002a8 <__Init_Data+0x4c>)
 800027e:	4298      	cmp	r0, r3
 8000280:	d209      	bcs.n	8000296 <__Init_Data+0x3a>
		*(dst++) = 0;
 8000282:	43c2      	mvns	r2, r0
 8000284:	441a      	add	r2, r3
 8000286:	f022 0203 	bic.w	r2, r2, #3
 800028a:	3204      	adds	r2, #4
 800028c:	2100      	movs	r1, #0
}
 800028e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000292:	f000 bee7 	b.w	8001064 <memset>
 8000296:	bd08      	pop	{r3, pc}
 8000298:	08001100 	.word	0x08001100
 800029c:	20000000 	.word	0x20000000
 80002a0:	20000028 	.word	0x20000028
 80002a4:	20000028 	.word	0x20000028
 80002a8:	20000030 	.word	0x20000030

080002ac <main>:
//ALIENTEK miniSTM32开发板实验1
//跑马灯实验  
//技术支持：www.openedv.com
//广州市星翼电子科技有限公司
 int main(void)
 {	
 80002ac:	b580      	push	{r7, lr}
	delay_init();	    	 //延时函数初始化	  
	LED_Init();		  	//初始化与LED连接的硬件接口
	while(1)
	{
		LED0=0;
 80002ae:	2700      	movs	r7, #0
//跑马灯实验  
//技术支持：www.openedv.com
//广州市星翼电子科技有限公司
 int main(void)
 {	
	delay_init();	    	 //延时函数初始化	  
 80002b0:	f000 f842 	bl	8000338 <delay_init>
	LED_Init();		  	//初始化与LED连接的硬件接口
	while(1)
	{
		LED0=0;
 80002b4:	46b8      	mov	r8, r7
//技术支持：www.openedv.com
//广州市星翼电子科技有限公司
 int main(void)
 {	
	delay_init();	    	 //延时函数初始化	  
	LED_Init();		  	//初始化与LED连接的硬件接口
 80002b6:	f000 f813 	bl	80002e0 <LED_Init>
	while(1)
	{
		LED0=0;
 80002ba:	4e07      	ldr	r6, [pc, #28]	; (80002d8 <main+0x2c>)
		LED1=1;
 80002bc:	4d07      	ldr	r5, [pc, #28]	; (80002dc <main+0x30>)
 80002be:	2401      	movs	r4, #1
 {	
	delay_init();	    	 //延时函数初始化	  
	LED_Init();		  	//初始化与LED连接的硬件接口
	while(1)
	{
		LED0=0;
 80002c0:	f8c6 8000 	str.w	r8, [r6]
		LED1=1;
		delay_ms(100);	 //延时300ms
 80002c4:	2064      	movs	r0, #100	; 0x64
	delay_init();	    	 //延时函数初始化	  
	LED_Init();		  	//初始化与LED连接的硬件接口
	while(1)
	{
		LED0=0;
		LED1=1;
 80002c6:	602c      	str	r4, [r5, #0]
		delay_ms(100);	 //延时300ms
 80002c8:	f000 f874 	bl	80003b4 <delay_ms>
		LED0=1;
 80002cc:	6034      	str	r4, [r6, #0]
		LED1=0;
		delay_ms(100);	//延时300ms
 80002ce:	2064      	movs	r0, #100	; 0x64
	{
		LED0=0;
		LED1=1;
		delay_ms(100);	 //延时300ms
		LED0=1;
		LED1=0;
 80002d0:	602f      	str	r7, [r5, #0]
		delay_ms(100);	//延时300ms
 80002d2:	f000 f86f 	bl	80003b4 <delay_ms>
	}
 80002d6:	e7f3      	b.n	80002c0 <main+0x14>
 80002d8:	422101a0 	.word	0x422101a0
 80002dc:	42228188 	.word	0x42228188

080002e0 <LED_Init>:
////////////////////////////////////////////////////////////////////////////////// 	   

//初始化PA8和PD2为输出口.并使能这两个口的时钟		    
//LED IO初始化
void LED_Init(void)
{
 80002e0:	b570      	push	{r4, r5, r6, lr}
 RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA|RCC_APB2Periph_GPIOD, ENABLE);	 //使能PA,PD端口时钟
	
 GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;				 //LED0-->PA.8 端口配置
 GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP; 		 //推挽输出
 GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;		 //IO口速度为50MHz
 GPIO_Init(GPIOA, &GPIO_InitStructure);					 //根据设定参数初始化GPIOA.8
 80002e2:	4e13      	ldr	r6, [pc, #76]	; (8000330 <LED_Init+0x50>)
////////////////////////////////////////////////////////////////////////////////// 	   

//初始化PA8和PD2为输出口.并使能这两个口的时钟		    
//LED IO初始化
void LED_Init(void)
{
 80002e4:	b082      	sub	sp, #8
 
 GPIO_InitTypeDef  GPIO_InitStructure;
 	
 RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA|RCC_APB2Periph_GPIOD, ENABLE);	 //使能PA,PD端口时钟
 80002e6:	2024      	movs	r0, #36	; 0x24
 80002e8:	2101      	movs	r1, #1
 80002ea:	f000 fdd1 	bl	8000e90 <RCC_APB2PeriphClockCmd>
	
 GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;				 //LED0-->PA.8 端口配置
 80002ee:	f44f 7480 	mov.w	r4, #256	; 0x100
 GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP; 		 //推挽输出
 80002f2:	2210      	movs	r2, #16
 GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;		 //IO口速度为50MHz
 80002f4:	2303      	movs	r3, #3
 GPIO_Init(GPIOA, &GPIO_InitStructure);					 //根据设定参数初始化GPIOA.8
 80002f6:	4630      	mov	r0, r6
 80002f8:	a901      	add	r1, sp, #4
 GPIO_SetBits(GPIOA,GPIO_Pin_8);						 //PA.8 输出高

 GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;	    		 //LED1-->PD.2 端口配置, 推挽输出
 GPIO_Init(GPIOD, &GPIO_InitStructure);	  				 //推挽输出 ，IO口速度为50MHz
 80002fa:	4d0e      	ldr	r5, [pc, #56]	; (8000334 <LED_Init+0x54>)
 GPIO_InitTypeDef  GPIO_InitStructure;
 	
 RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA|RCC_APB2Periph_GPIOD, ENABLE);	 //使能PA,PD端口时钟
	
 GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;				 //LED0-->PA.8 端口配置
 GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP; 		 //推挽输出
 80002fc:	f88d 2007 	strb.w	r2, [sp, #7]
 GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;		 //IO口速度为50MHz
 8000300:	f88d 3006 	strb.w	r3, [sp, #6]
 
 GPIO_InitTypeDef  GPIO_InitStructure;
 	
 RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA|RCC_APB2Periph_GPIOD, ENABLE);	 //使能PA,PD端口时钟
	
 GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;				 //LED0-->PA.8 端口配置
 8000304:	f8ad 4004 	strh.w	r4, [sp, #4]
 GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP; 		 //推挽输出
 GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;		 //IO口速度为50MHz
 GPIO_Init(GPIOA, &GPIO_InitStructure);					 //根据设定参数初始化GPIOA.8
 8000308:	f000 fa02 	bl	8000710 <GPIO_Init>
 GPIO_SetBits(GPIOA,GPIO_Pin_8);						 //PA.8 输出高
 800030c:	4630      	mov	r0, r6
 800030e:	4621      	mov	r1, r4

 GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;	    		 //LED1-->PD.2 端口配置, 推挽输出
 8000310:	2404      	movs	r4, #4
	
 GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;				 //LED0-->PA.8 端口配置
 GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP; 		 //推挽输出
 GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;		 //IO口速度为50MHz
 GPIO_Init(GPIOA, &GPIO_InitStructure);					 //根据设定参数初始化GPIOA.8
 GPIO_SetBits(GPIOA,GPIO_Pin_8);						 //PA.8 输出高
 8000312:	f000 fbff 	bl	8000b14 <GPIO_SetBits>

 GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;	    		 //LED1-->PD.2 端口配置, 推挽输出
 GPIO_Init(GPIOD, &GPIO_InitStructure);	  				 //推挽输出 ，IO口速度为50MHz
 8000316:	eb0d 0104 	add.w	r1, sp, r4
 800031a:	4628      	mov	r0, r5
 GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP; 		 //推挽输出
 GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;		 //IO口速度为50MHz
 GPIO_Init(GPIOA, &GPIO_InitStructure);					 //根据设定参数初始化GPIOA.8
 GPIO_SetBits(GPIOA,GPIO_Pin_8);						 //PA.8 输出高

 GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;	    		 //LED1-->PD.2 端口配置, 推挽输出
 800031c:	f8ad 4004 	strh.w	r4, [sp, #4]
 GPIO_Init(GPIOD, &GPIO_InitStructure);	  				 //推挽输出 ，IO口速度为50MHz
 8000320:	f000 f9f6 	bl	8000710 <GPIO_Init>
 GPIO_SetBits(GPIOD,GPIO_Pin_2); 						 //PD.2 输出高 
 8000324:	4628      	mov	r0, r5
 8000326:	4621      	mov	r1, r4
 8000328:	f000 fbf4 	bl	8000b14 <GPIO_SetBits>
}
 800032c:	b002      	add	sp, #8
 800032e:	bd70      	pop	{r4, r5, r6, pc}
 8000330:	40010800 	.word	0x40010800
 8000334:	40011400 	.word	0x40011400

08000338 <delay_init>:
//初始化延迟函数
//当使用OS的时候,此函数会初始化OS的时钟节拍
//SYSTICK的时钟固定为HCLK时钟的1/8
//SYSCLK:系统时钟
void delay_init()
{
 8000338:	b508      	push	{r3, lr}
#if SYSTEM_SUPPORT_OS  							//如果需要支持OS.
	u32 reload;
#endif
	SysTick_CLKSourceConfig(SysTick_CLKSource_HCLK_Div8);	//选择外部时钟  HCLK/8
 800033a:	f06f 0004 	mvn.w	r0, #4
 800033e:	f000 f961 	bl	8000604 <SysTick_CLKSourceConfig>
	fac_us=SystemCoreClock/8000000;				//为系统时钟的1/8  
 8000342:	4b08      	ldr	r3, [pc, #32]	; (8000364 <delay_init+0x2c>)
 8000344:	4a08      	ldr	r2, [pc, #32]	; (8000368 <delay_init+0x30>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	4908      	ldr	r1, [pc, #32]	; (800036c <delay_init+0x34>)
 800034a:	fba2 2303 	umull	r2, r3, r2, r3
 800034e:	f3c3 5347 	ubfx	r3, r3, #21, #8
	SysTick->CTRL|=SysTick_CTRL_TICKINT_Msk;   	//开启SYSTICK中断
	SysTick->LOAD=reload; 						//每1/delay_ostickspersec秒中断一次	
	SysTick->CTRL|=SysTick_CTRL_ENABLE_Msk;   	//开启SYSTICK    

#else
	fac_ms=(u16)fac_us*1000;					//非OS下,代表每个ms需要的systick时钟数   
 8000352:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 8000356:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800035a:	00d2      	lsls	r2, r2, #3
{
#if SYSTEM_SUPPORT_OS  							//如果需要支持OS.
	u32 reload;
#endif
	SysTick_CLKSourceConfig(SysTick_CLKSource_HCLK_Div8);	//选择外部时钟  HCLK/8
	fac_us=SystemCoreClock/8000000;				//为系统时钟的1/8  
 800035c:	700b      	strb	r3, [r1, #0]
	SysTick->CTRL|=SysTick_CTRL_TICKINT_Msk;   	//开启SYSTICK中断
	SysTick->LOAD=reload; 						//每1/delay_ostickspersec秒中断一次	
	SysTick->CTRL|=SysTick_CTRL_ENABLE_Msk;   	//开启SYSTICK    

#else
	fac_ms=(u16)fac_us*1000;					//非OS下,代表每个ms需要的systick时钟数   
 800035e:	804a      	strh	r2, [r1, #2]
{
#if SYSTEM_SUPPORT_OS  							//如果需要支持OS.
	u32 reload;
#endif
	SysTick_CLKSourceConfig(SysTick_CLKSource_HCLK_Div8);	//选择外部时钟  HCLK/8
	fac_us=SystemCoreClock/8000000;				//为系统时钟的1/8  
 8000360:	bd08      	pop	{r3, pc}
 8000362:	bf00      	nop
 8000364:	20000010 	.word	0x20000010
 8000368:	431bde83 	.word	0x431bde83
 800036c:	20000028 	.word	0x20000028

08000370 <delay_us>:
//延时nus
//nus为要延时的us数.		    								   
void delay_us(u32 nus)
{		
	u32 temp;	    	 
	SysTick->LOAD=nus*fac_us; 					//时间加载	  		 
 8000370:	4b0e      	ldr	r3, [pc, #56]	; (80003ac <delay_us+0x3c>)
}
#else //不用OS时
//延时nus
//nus为要延时的us数.		    								   
void delay_us(u32 nus)
{		
 8000372:	b410      	push	{r4}
	SysTick->LOAD=nus*fac_us; 					//时间加载	  		 
	SysTick->VAL=0x00;        					//清空计数器
	SysTick->CTRL|=SysTick_CTRL_ENABLE_Msk ;	//开始倒数	  
	do
	{
		temp=SysTick->CTRL;
 8000374:	4619      	mov	r1, r3
//延时nus
//nus为要延时的us数.		    								   
void delay_us(u32 nus)
{		
	u32 temp;	    	 
	SysTick->LOAD=nus*fac_us; 					//时间加载	  		 
 8000376:	4a0e      	ldr	r2, [pc, #56]	; (80003b0 <delay_us+0x40>)
	SysTick->VAL=0x00;        					//清空计数器
 8000378:	2400      	movs	r4, #0
//延时nus
//nus为要延时的us数.		    								   
void delay_us(u32 nus)
{		
	u32 temp;	    	 
	SysTick->LOAD=nus*fac_us; 					//时间加载	  		 
 800037a:	7812      	ldrb	r2, [r2, #0]
 800037c:	fb02 f000 	mul.w	r0, r2, r0
 8000380:	6058      	str	r0, [r3, #4]
	SysTick->VAL=0x00;        					//清空计数器
 8000382:	609c      	str	r4, [r3, #8]
	SysTick->CTRL|=SysTick_CTRL_ENABLE_Msk ;	//开始倒数	  
 8000384:	681a      	ldr	r2, [r3, #0]
 8000386:	f042 0201 	orr.w	r2, r2, #1
 800038a:	601a      	str	r2, [r3, #0]
	do
	{
		temp=SysTick->CTRL;
 800038c:	680b      	ldr	r3, [r1, #0]
 800038e:	4a07      	ldr	r2, [pc, #28]	; (80003ac <delay_us+0x3c>)
	}while((temp&0x01)&&!(temp&(1<<16)));		//等待时间到达   
 8000390:	f003 1301 	and.w	r3, r3, #65537	; 0x10001
 8000394:	2b01      	cmp	r3, #1
 8000396:	d0f9      	beq.n	800038c <delay_us+0x1c>
	SysTick->CTRL&=~SysTick_CTRL_ENABLE_Msk;	//关闭计数器
 8000398:	6813      	ldr	r3, [r2, #0]
	SysTick->VAL =0X00;      					 //清空计数器	 
 800039a:	2100      	movs	r1, #0
	SysTick->CTRL|=SysTick_CTRL_ENABLE_Msk ;	//开始倒数	  
	do
	{
		temp=SysTick->CTRL;
	}while((temp&0x01)&&!(temp&(1<<16)));		//等待时间到达   
	SysTick->CTRL&=~SysTick_CTRL_ENABLE_Msk;	//关闭计数器
 800039c:	f023 0301 	bic.w	r3, r3, #1
 80003a0:	6013      	str	r3, [r2, #0]
	SysTick->VAL =0X00;      					 //清空计数器	 
}
 80003a2:	f85d 4b04 	ldr.w	r4, [sp], #4
	do
	{
		temp=SysTick->CTRL;
	}while((temp&0x01)&&!(temp&(1<<16)));		//等待时间到达   
	SysTick->CTRL&=~SysTick_CTRL_ENABLE_Msk;	//关闭计数器
	SysTick->VAL =0X00;      					 //清空计数器	 
 80003a6:	6091      	str	r1, [r2, #8]
}
 80003a8:	4770      	bx	lr
 80003aa:	bf00      	nop
 80003ac:	e000e010 	.word	0xe000e010
 80003b0:	20000028 	.word	0x20000028

080003b4 <delay_ms>:
//SYSCLK单位为Hz,nms单位为ms
//对72M条件下,nms<=1864 
void delay_ms(u16 nms)
{	 		  	  
	u32 temp;		   
	SysTick->LOAD=(u32)nms*fac_ms;				//时间加载(SysTick->LOAD为24bit)
 80003b4:	4b0e      	ldr	r3, [pc, #56]	; (80003f0 <delay_ms+0x3c>)
 80003b6:	4a0f      	ldr	r2, [pc, #60]	; (80003f4 <delay_ms+0x40>)
	SysTick->VAL =0x00;							//清空计数器
	SysTick->CTRL|=SysTick_CTRL_ENABLE_Msk ;	//开始倒数  
	do
	{
		temp=SysTick->CTRL;
 80003b8:	4619      	mov	r1, r3
//SYSCLK单位为Hz,nms单位为ms
//对72M条件下,nms<=1864 
void delay_ms(u16 nms)
{	 		  	  
	u32 temp;		   
	SysTick->LOAD=(u32)nms*fac_ms;				//时间加载(SysTick->LOAD为24bit)
 80003ba:	8852      	ldrh	r2, [r2, #2]
//SysTick->LOAD为24位寄存器,所以,最大延时为:
//nms<=0xffffff*8*1000/SYSCLK
//SYSCLK单位为Hz,nms单位为ms
//对72M条件下,nms<=1864 
void delay_ms(u16 nms)
{	 		  	  
 80003bc:	b410      	push	{r4}
	u32 temp;		   
	SysTick->LOAD=(u32)nms*fac_ms;				//时间加载(SysTick->LOAD为24bit)
 80003be:	fb02 f000 	mul.w	r0, r2, r0
	SysTick->VAL =0x00;							//清空计数器
 80003c2:	2400      	movs	r4, #0
//SYSCLK单位为Hz,nms单位为ms
//对72M条件下,nms<=1864 
void delay_ms(u16 nms)
{	 		  	  
	u32 temp;		   
	SysTick->LOAD=(u32)nms*fac_ms;				//时间加载(SysTick->LOAD为24bit)
 80003c4:	6058      	str	r0, [r3, #4]
	SysTick->VAL =0x00;							//清空计数器
 80003c6:	609c      	str	r4, [r3, #8]
	SysTick->CTRL|=SysTick_CTRL_ENABLE_Msk ;	//开始倒数  
 80003c8:	681a      	ldr	r2, [r3, #0]
 80003ca:	f042 0201 	orr.w	r2, r2, #1
 80003ce:	601a      	str	r2, [r3, #0]
	do
	{
		temp=SysTick->CTRL;
 80003d0:	680b      	ldr	r3, [r1, #0]
 80003d2:	4a07      	ldr	r2, [pc, #28]	; (80003f0 <delay_ms+0x3c>)
	}while((temp&0x01)&&!(temp&(1<<16)));		//等待时间到达   
 80003d4:	f003 1301 	and.w	r3, r3, #65537	; 0x10001
 80003d8:	2b01      	cmp	r3, #1
 80003da:	d0f9      	beq.n	80003d0 <delay_ms+0x1c>
	SysTick->CTRL&=~SysTick_CTRL_ENABLE_Msk;	//关闭计数器
 80003dc:	6813      	ldr	r3, [r2, #0]
	SysTick->VAL =0X00;       					//清空计数器	  	    
 80003de:	2100      	movs	r1, #0
	SysTick->CTRL|=SysTick_CTRL_ENABLE_Msk ;	//开始倒数  
	do
	{
		temp=SysTick->CTRL;
	}while((temp&0x01)&&!(temp&(1<<16)));		//等待时间到达   
	SysTick->CTRL&=~SysTick_CTRL_ENABLE_Msk;	//关闭计数器
 80003e0:	f023 0301 	bic.w	r3, r3, #1
 80003e4:	6013      	str	r3, [r2, #0]
	SysTick->VAL =0X00;       					//清空计数器	  	    
} 
 80003e6:	f85d 4b04 	ldr.w	r4, [sp], #4
	do
	{
		temp=SysTick->CTRL;
	}while((temp&0x01)&&!(temp&(1<<16)));		//等待时间到达   
	SysTick->CTRL&=~SysTick_CTRL_ENABLE_Msk;	//关闭计数器
	SysTick->VAL =0X00;       					//清空计数器	  	    
 80003ea:	6091      	str	r1, [r2, #8]
} 
 80003ec:	4770      	bx	lr
 80003ee:	bf00      	nop
 80003f0:	e000e010 	.word	0xe000e010
 80003f4:	20000028 	.word	0x20000028

080003f8 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80003f8:	4b3c      	ldr	r3, [pc, #240]	; (80004ec <SystemInit+0xf4>)
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80003fa:	b430      	push	{r4, r5}
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80003fc:	6818      	ldr	r0, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80003fe:	493c      	ldr	r1, [pc, #240]	; (80004f0 <SystemInit+0xf8>)
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000400:	f040 0001 	orr.w	r0, r0, #1
 8000404:	6018      	str	r0, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000406:	685d      	ldr	r5, [r3, #4]
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000408:	b082      	sub	sp, #8
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 800040a:	4029      	ands	r1, r5
 800040c:	6059      	str	r1, [r3, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800040e:	6819      	ldr	r1, [r3, #0]
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000410:	2000      	movs	r0, #0
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000412:	f021 7184 	bic.w	r1, r1, #17301504	; 0x1080000
 8000416:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800041a:	6019      	str	r1, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800041c:	6819      	ldr	r1, [r3, #0]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 800041e:	f44f 041f 	mov.w	r4, #10420224	; 0x9f0000
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000422:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8000426:	6019      	str	r1, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000428:	6859      	ldr	r1, [r3, #4]
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800042a:	461a      	mov	r2, r3

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 800042c:	f421 01fe 	bic.w	r1, r1, #8323072	; 0x7f0000
 8000430:	6059      	str	r1, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8000432:	609c      	str	r4, [r3, #8]
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000434:	9000      	str	r0, [sp, #0]
 8000436:	9001      	str	r0, [sp, #4]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000438:	6819      	ldr	r1, [r3, #0]
 800043a:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 800043e:	6019      	str	r1, [r3, #0]
 8000440:	e003      	b.n	800044a <SystemInit+0x52>
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
    StartUpCounter++;  
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000442:	9b00      	ldr	r3, [sp, #0]
 8000444:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000448:	d009      	beq.n	800045e <SystemInit+0x66>
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800044a:	6813      	ldr	r3, [r2, #0]
 800044c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000450:	9301      	str	r3, [sp, #4]
    StartUpCounter++;  
 8000452:	9b00      	ldr	r3, [sp, #0]
 8000454:	3301      	adds	r3, #1
 8000456:	9300      	str	r3, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000458:	9b01      	ldr	r3, [sp, #4]
 800045a:	2b00      	cmp	r3, #0
 800045c:	d0f1      	beq.n	8000442 <SystemInit+0x4a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800045e:	4b23      	ldr	r3, [pc, #140]	; (80004ec <SystemInit+0xf4>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
  {
    HSEStatus = (uint32_t)0x01;
 8000466:	bf18      	it	ne
 8000468:	2301      	movne	r3, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800046a:	9301      	str	r3, [sp, #4]
  }  

  if (HSEStatus == (uint32_t)0x01)
 800046c:	9b01      	ldr	r3, [sp, #4]
 800046e:	2b01      	cmp	r3, #1
 8000470:	d006      	beq.n	8000480 <SystemInit+0x88>
  SetSysClock();

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000472:	4b20      	ldr	r3, [pc, #128]	; (80004f4 <SystemInit+0xfc>)
 8000474:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000478:	609a      	str	r2, [r3, #8]
#endif 
}
 800047a:	b002      	add	sp, #8
 800047c:	bc30      	pop	{r4, r5}
 800047e:	4770      	bx	lr
  }  

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8000480:	4a1d      	ldr	r2, [pc, #116]	; (80004f8 <SystemInit+0x100>)
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000482:	4b1a      	ldr	r3, [pc, #104]	; (80004ec <SystemInit+0xf4>)
  }  

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8000484:	6810      	ldr	r0, [r2, #0]

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000486:	4619      	mov	r1, r3
  }  

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8000488:	f040 0010 	orr.w	r0, r0, #16
 800048c:	6010      	str	r0, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 800048e:	6810      	ldr	r0, [r2, #0]
 8000490:	f020 0003 	bic.w	r0, r0, #3
 8000494:	6010      	str	r0, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8000496:	6810      	ldr	r0, [r2, #0]
 8000498:	f040 0002 	orr.w	r0, r0, #2
 800049c:	6010      	str	r0, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 800049e:	685a      	ldr	r2, [r3, #4]
 80004a0:	605a      	str	r2, [r3, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80004a2:	685a      	ldr	r2, [r3, #4]
 80004a4:	605a      	str	r2, [r3, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 80004a6:	685a      	ldr	r2, [r3, #4]
 80004a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80004ac:	605a      	str	r2, [r3, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 80004ae:	685a      	ldr	r2, [r3, #4]
 80004b0:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 80004b4:	605a      	str	r2, [r3, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 80004b6:	685a      	ldr	r2, [r3, #4]
 80004b8:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
 80004bc:	605a      	str	r2, [r3, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 80004be:	681a      	ldr	r2, [r3, #0]
 80004c0:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80004c4:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80004c6:	680b      	ldr	r3, [r1, #0]
 80004c8:	4a08      	ldr	r2, [pc, #32]	; (80004ec <SystemInit+0xf4>)
 80004ca:	019b      	lsls	r3, r3, #6
 80004cc:	d5fb      	bpl.n	80004c6 <SystemInit+0xce>
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 80004ce:	4611      	mov	r1, r2
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80004d0:	6853      	ldr	r3, [r2, #4]
 80004d2:	f023 0303 	bic.w	r3, r3, #3
 80004d6:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 80004d8:	6853      	ldr	r3, [r2, #4]
 80004da:	f043 0302 	orr.w	r3, r3, #2
 80004de:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 80004e0:	684b      	ldr	r3, [r1, #4]
 80004e2:	f003 030c 	and.w	r3, r3, #12
 80004e6:	2b08      	cmp	r3, #8
 80004e8:	d1fa      	bne.n	80004e0 <SystemInit+0xe8>
 80004ea:	e7c2      	b.n	8000472 <SystemInit+0x7a>
 80004ec:	40021000 	.word	0x40021000
 80004f0:	f8ff0000 	.word	0xf8ff0000
 80004f4:	e000ed00 	.word	0xe000ed00
 80004f8:	40022000 	.word	0x40022000

080004fc <SystemCoreClockUpdate>:
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80004fc:	4a11      	ldr	r2, [pc, #68]	; (8000544 <SystemCoreClockUpdate+0x48>)
 80004fe:	6853      	ldr	r3, [r2, #4]
 8000500:	f003 030c 	and.w	r3, r3, #12
  
  switch (tmp)
 8000504:	2b08      	cmp	r3, #8
 8000506:	d10e      	bne.n	8000526 <SystemCoreClockUpdate+0x2a>
      SystemCoreClock = HSE_VALUE;
      break;
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8000508:	6853      	ldr	r3, [r2, #4]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 800050a:	6851      	ldr	r1, [r2, #4]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 800050c:	f3c3 4383 	ubfx	r3, r3, #18, #4
      
      if (pllsource == 0x00)
 8000510:	03c9      	lsls	r1, r1, #15
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 8000512:	f103 0302 	add.w	r3, r3, #2
      
      if (pllsource == 0x00)
 8000516:	d510      	bpl.n	800053a <SystemCoreClockUpdate+0x3e>
       prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 8000518:	6852      	ldr	r2, [r2, #4]
 800051a:	0392      	lsls	r2, r2, #14
 800051c:	d40d      	bmi.n	800053a <SystemCoreClockUpdate+0x3e>
        {/* HSE oscillator clock divided by 2 */
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
        }
        else
        {
          SystemCoreClock = HSE_VALUE * pllmull;
 800051e:	4a0a      	ldr	r2, [pc, #40]	; (8000548 <SystemCoreClockUpdate+0x4c>)
 8000520:	fb02 f303 	mul.w	r3, r2, r3
 8000524:	e000      	b.n	8000528 <SystemCoreClockUpdate+0x2c>
#endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
  
  switch (tmp)
 8000526:	4b08      	ldr	r3, [pc, #32]	; (8000548 <SystemCoreClockUpdate+0x4c>)
      break;
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000528:	4a06      	ldr	r2, [pc, #24]	; (8000544 <SystemCoreClockUpdate+0x48>)
 800052a:	4908      	ldr	r1, [pc, #32]	; (800054c <SystemCoreClockUpdate+0x50>)
 800052c:	6852      	ldr	r2, [r2, #4]
 800052e:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8000532:	5c8a      	ldrb	r2, [r1, r2]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 8000534:	40d3      	lsrs	r3, r2
 8000536:	610b      	str	r3, [r1, #16]
 8000538:	4770      	bx	lr
       SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
        {/* HSE oscillator clock divided by 2 */
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
 800053a:	4a05      	ldr	r2, [pc, #20]	; (8000550 <SystemCoreClockUpdate+0x54>)
 800053c:	fb02 f303 	mul.w	r3, r2, r3
 8000540:	e7f2      	b.n	8000528 <SystemCoreClockUpdate+0x2c>
 8000542:	bf00      	nop
 8000544:	40021000 	.word	0x40021000
 8000548:	007a1200 	.word	0x007a1200
 800054c:	20000000 	.word	0x20000000
 8000550:	003d0900 	.word	0x003d0900

08000554 <NVIC_PriorityGroupConfig>:
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8000554:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8000558:	4b02      	ldr	r3, [pc, #8]	; (8000564 <NVIC_PriorityGroupConfig+0x10>)
 800055a:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 800055e:	60d8      	str	r0, [r3, #12]
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	e000ed00 	.word	0xe000ed00

08000568 <NVIC_Init>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000568:	78c3      	ldrb	r3, [r0, #3]
 800056a:	b95b      	cbnz	r3, 8000584 <NVIC_Init+0x1c>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800056c:	7803      	ldrb	r3, [r0, #0]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800056e:	2101      	movs	r1, #1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000570:	095a      	lsrs	r2, r3, #5
 8000572:	4817      	ldr	r0, [pc, #92]	; (80005d0 <NVIC_Init+0x68>)
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000574:	f003 031f 	and.w	r3, r3, #31
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000578:	3220      	adds	r2, #32
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800057a:	fa01 f303 	lsl.w	r3, r1, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800057e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8000582:	4770      	bx	lr
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000584:	4a13      	ldr	r2, [pc, #76]	; (80005d4 <NVIC_Init+0x6c>)
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000586:	b430      	push	{r4, r5}
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000588:	68d2      	ldr	r2, [r2, #12]
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 800058a:	7843      	ldrb	r3, [r0, #1]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800058c:	43d2      	mvns	r2, r2
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 800058e:	7881      	ldrb	r1, [r0, #2]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000590:	f3c2 2202 	ubfx	r2, r2, #8, #3
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;
 8000594:	240f      	movs	r4, #15
 8000596:	40d4      	lsrs	r4, r2
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
 8000598:	f1c2 0504 	rsb	r5, r2, #4
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 800059c:	fa03 f205 	lsl.w	r2, r3, r5
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 80005a0:	ea04 0301 	and.w	r3, r4, r1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80005a4:	7801      	ldrb	r1, [r0, #0]
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 80005a6:	4313      	orrs	r3, r2
    tmppriority = tmppriority << 0x04;
 80005a8:	011b      	lsls	r3, r3, #4
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80005aa:	f101 4260 	add.w	r2, r1, #3758096384	; 0xe0000000
 80005ae:	b2db      	uxtb	r3, r3
 80005b0:	f502 4261 	add.w	r2, r2, #57600	; 0xe100
 80005b4:	f882 3300 	strb.w	r3, [r2, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80005b8:	7803      	ldrb	r3, [r0, #0]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80005ba:	2201      	movs	r2, #1
 80005bc:	f003 001f 	and.w	r0, r3, #31

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80005c0:	4903      	ldr	r1, [pc, #12]	; (80005d0 <NVIC_Init+0x68>)
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80005c2:	095b      	lsrs	r3, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80005c4:	4082      	lsls	r2, r0
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80005c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 80005ca:	bc30      	pop	{r4, r5}
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop
 80005d0:	e000e100 	.word	0xe000e100
 80005d4:	e000ed00 	.word	0xe000ed00

080005d8 <NVIC_SetVectorTable>:
{ 
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 80005d8:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
 80005dc:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 80005e0:	4b01      	ldr	r3, [pc, #4]	; (80005e8 <NVIC_SetVectorTable+0x10>)
 80005e2:	4308      	orrs	r0, r1
 80005e4:	6098      	str	r0, [r3, #8]
 80005e6:	4770      	bx	lr
 80005e8:	e000ed00 	.word	0xe000ed00

080005ec <NVIC_SystemLPConfig>:
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
  {
    SCB->SCR |= LowPowerMode;
 80005ec:	4a04      	ldr	r2, [pc, #16]	; (8000600 <NVIC_SystemLPConfig+0x14>)
 80005ee:	6913      	ldr	r3, [r2, #16]
{
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 80005f0:	b919      	cbnz	r1, 80005fa <NVIC_SystemLPConfig+0xe>
  {
    SCB->SCR |= LowPowerMode;
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 80005f2:	ea23 0000 	bic.w	r0, r3, r0
 80005f6:	6110      	str	r0, [r2, #16]
 80005f8:	4770      	bx	lr
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
  {
    SCB->SCR |= LowPowerMode;
 80005fa:	4318      	orrs	r0, r3
 80005fc:	6110      	str	r0, [r2, #16]
 80005fe:	4770      	bx	lr
 8000600:	e000ed00 	.word	0xe000ed00

08000604 <SysTick_CLKSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8000604:	4a04      	ldr	r2, [pc, #16]	; (8000618 <SysTick_CLKSourceConfig+0x14>)
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 8000606:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8000608:	6813      	ldr	r3, [r2, #0]
 800060a:	bf0c      	ite	eq
 800060c:	f043 0304 	orreq.w	r3, r3, #4
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 8000610:	f023 0304 	bicne.w	r3, r3, #4
 8000614:	6013      	str	r3, [r2, #0]
 8000616:	4770      	bx	lr
 8000618:	e000e010 	.word	0xe000e010

0800061c <GPIO_DeInit>:
  * @brief  Deinitializes the GPIOx peripheral registers to their default reset values.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 800061c:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  if (GPIOx == GPIOA)
 800061e:	4b2f      	ldr	r3, [pc, #188]	; (80006dc <GPIO_DeInit+0xc0>)
 8000620:	4298      	cmp	r0, r3
 8000622:	d01e      	beq.n	8000662 <GPIO_DeInit+0x46>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
  }
  else if (GPIOx == GPIOB)
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <GPIO_DeInit+0xc4>)
 8000626:	4298      	cmp	r0, r3
 8000628:	d025      	beq.n	8000676 <GPIO_DeInit+0x5a>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
  }
  else if (GPIOx == GPIOC)
 800062a:	4b2e      	ldr	r3, [pc, #184]	; (80006e4 <GPIO_DeInit+0xc8>)
 800062c:	4298      	cmp	r0, r3
 800062e:	d02c      	beq.n	800068a <GPIO_DeInit+0x6e>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
  }
  else if (GPIOx == GPIOD)
 8000630:	4b2d      	ldr	r3, [pc, #180]	; (80006e8 <GPIO_DeInit+0xcc>)
 8000632:	4298      	cmp	r0, r3
 8000634:	d033      	beq.n	800069e <GPIO_DeInit+0x82>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
  }    
  else if (GPIOx == GPIOE)
 8000636:	4b2d      	ldr	r3, [pc, #180]	; (80006ec <GPIO_DeInit+0xd0>)
 8000638:	4298      	cmp	r0, r3
 800063a:	d03a      	beq.n	80006b2 <GPIO_DeInit+0x96>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
  } 
  else if (GPIOx == GPIOF)
 800063c:	4b2c      	ldr	r3, [pc, #176]	; (80006f0 <GPIO_DeInit+0xd4>)
 800063e:	4298      	cmp	r0, r3
 8000640:	d041      	beq.n	80006c6 <GPIO_DeInit+0xaa>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
  }
  else
  {
    if (GPIOx == GPIOG)
 8000642:	4b2c      	ldr	r3, [pc, #176]	; (80006f4 <GPIO_DeInit+0xd8>)
 8000644:	4298      	cmp	r0, r3
 8000646:	d000      	beq.n	800064a <GPIO_DeInit+0x2e>
 8000648:	bd08      	pop	{r3, pc}
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
 800064a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800064e:	2101      	movs	r1, #1
 8000650:	f000 fc36 	bl	8000ec0 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
    }
  }
}
 8000654:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if (GPIOx == GPIOG)
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
 8000658:	f44f 7080 	mov.w	r0, #256	; 0x100
 800065c:	2100      	movs	r1, #0
 800065e:	f000 bc2f 	b.w	8000ec0 <RCC_APB2PeriphResetCmd>
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  if (GPIOx == GPIOA)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
 8000662:	2004      	movs	r0, #4
 8000664:	2101      	movs	r1, #1
 8000666:	f000 fc2b 	bl	8000ec0 <RCC_APB2PeriphResetCmd>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
    }
  }
}
 800066a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  if (GPIOx == GPIOA)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
 800066e:	2004      	movs	r0, #4
 8000670:	2100      	movs	r1, #0
 8000672:	f000 bc25 	b.w	8000ec0 <RCC_APB2PeriphResetCmd>
  }
  else if (GPIOx == GPIOB)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
 8000676:	2008      	movs	r0, #8
 8000678:	2101      	movs	r1, #1
 800067a:	f000 fc21 	bl	8000ec0 <RCC_APB2PeriphResetCmd>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
    }
  }
}
 800067e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
  }
  else if (GPIOx == GPIOB)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
 8000682:	2008      	movs	r0, #8
 8000684:	2100      	movs	r1, #0
 8000686:	f000 bc1b 	b.w	8000ec0 <RCC_APB2PeriphResetCmd>
  }
  else if (GPIOx == GPIOC)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
 800068a:	2010      	movs	r0, #16
 800068c:	2101      	movs	r1, #1
 800068e:	f000 fc17 	bl	8000ec0 <RCC_APB2PeriphResetCmd>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
    }
  }
}
 8000692:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
  }
  else if (GPIOx == GPIOC)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
 8000696:	2010      	movs	r0, #16
 8000698:	2100      	movs	r1, #0
 800069a:	f000 bc11 	b.w	8000ec0 <RCC_APB2PeriphResetCmd>
  }
  else if (GPIOx == GPIOD)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
 800069e:	2020      	movs	r0, #32
 80006a0:	2101      	movs	r1, #1
 80006a2:	f000 fc0d 	bl	8000ec0 <RCC_APB2PeriphResetCmd>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
    }
  }
}
 80006a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
  }
  else if (GPIOx == GPIOD)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
 80006aa:	2020      	movs	r0, #32
 80006ac:	2100      	movs	r1, #0
 80006ae:	f000 bc07 	b.w	8000ec0 <RCC_APB2PeriphResetCmd>
  }    
  else if (GPIOx == GPIOE)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
 80006b2:	2040      	movs	r0, #64	; 0x40
 80006b4:	2101      	movs	r1, #1
 80006b6:	f000 fc03 	bl	8000ec0 <RCC_APB2PeriphResetCmd>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
    }
  }
}
 80006ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
  }    
  else if (GPIOx == GPIOE)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
 80006be:	2040      	movs	r0, #64	; 0x40
 80006c0:	2100      	movs	r1, #0
 80006c2:	f000 bbfd 	b.w	8000ec0 <RCC_APB2PeriphResetCmd>
  } 
  else if (GPIOx == GPIOF)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
 80006c6:	2080      	movs	r0, #128	; 0x80
 80006c8:	2101      	movs	r1, #1
 80006ca:	f000 fbf9 	bl	8000ec0 <RCC_APB2PeriphResetCmd>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
    }
  }
}
 80006ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
  } 
  else if (GPIOx == GPIOF)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
 80006d2:	2080      	movs	r0, #128	; 0x80
 80006d4:	2100      	movs	r1, #0
 80006d6:	f000 bbf3 	b.w	8000ec0 <RCC_APB2PeriphResetCmd>
 80006da:	bf00      	nop
 80006dc:	40010800 	.word	0x40010800
 80006e0:	40010c00 	.word	0x40010c00
 80006e4:	40011000 	.word	0x40011000
 80006e8:	40011400 	.word	0x40011400
 80006ec:	40011800 	.word	0x40011800
 80006f0:	40011c00 	.word	0x40011c00
 80006f4:	40012000 	.word	0x40012000

080006f8 <GPIO_AFIODeInit>:
  *   and EXTI configuration) registers to their default reset values.
  * @param  None
  * @retval None
  */
void GPIO_AFIODeInit(void)
{
 80006f8:	b508      	push	{r3, lr}
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
 80006fa:	2001      	movs	r0, #1
 80006fc:	4601      	mov	r1, r0
 80006fe:	f000 fbdf 	bl	8000ec0 <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
}
 8000702:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  * @retval None
  */
void GPIO_AFIODeInit(void)
{
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
 8000706:	2001      	movs	r0, #1
 8000708:	2100      	movs	r1, #0
 800070a:	f000 bbd9 	b.w	8000ec0 <RCC_APB2PeriphResetCmd>
 800070e:	bf00      	nop

08000710 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000710:	b430      	push	{r4, r5}
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8000712:	78cd      	ldrb	r5, [r1, #3]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8000714:	06eb      	lsls	r3, r5, #27
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8000716:	bf48      	it	mi
 8000718:	788b      	ldrbmi	r3, [r1, #2]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 800071a:	f005 040f 	and.w	r4, r5, #15
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 800071e:	bf48      	it	mi
 8000720:	431c      	orrmi	r4, r3
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8000722:	880b      	ldrh	r3, [r1, #0]
 8000724:	f013 0fff 	tst.w	r3, #255	; 0xff
 8000728:	d033      	beq.n	8000792 <GPIO_Init+0x82>
 800072a:	2d48      	cmp	r5, #72	; 0x48
  {
    tmpreg = GPIOx->CRL;
 800072c:	6802      	ldr	r2, [r0, #0]
 800072e:	f000 8099 	beq.w	8000864 <GPIO_Init+0x154>
 8000732:	2d28      	cmp	r5, #40	; 0x28
 8000734:	f000 80ff 	beq.w	8000936 <GPIO_Init+0x226>
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = ((uint32_t)0x01) << pinpos;
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
      if (currentpin == pos)
 8000738:	07d9      	lsls	r1, r3, #31
      {
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 800073a:	bf44      	itt	mi
 800073c:	f022 020f 	bicmi.w	r2, r2, #15
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000740:	4322      	orrmi	r2, r4
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = ((uint32_t)0x01) << pinpos;
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
      if (currentpin == pos)
 8000742:	0799      	lsls	r1, r3, #30
      {
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 8000744:	bf44      	itt	mi
 8000746:	f022 02f0 	bicmi.w	r2, r2, #240	; 0xf0
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 800074a:	ea42 1204 	orrmi.w	r2, r2, r4, lsl #4
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = ((uint32_t)0x01) << pinpos;
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
      if (currentpin == pos)
 800074e:	0759      	lsls	r1, r3, #29
      {
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 8000750:	bf44      	itt	mi
 8000752:	f422 6270 	bicmi.w	r2, r2, #3840	; 0xf00
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000756:	ea42 2204 	orrmi.w	r2, r2, r4, lsl #8
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = ((uint32_t)0x01) << pinpos;
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
      if (currentpin == pos)
 800075a:	0719      	lsls	r1, r3, #28
      {
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 800075c:	bf44      	itt	mi
 800075e:	f422 4270 	bicmi.w	r2, r2, #61440	; 0xf000
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000762:	ea42 3204 	orrmi.w	r2, r2, r4, lsl #12
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = ((uint32_t)0x01) << pinpos;
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
      if (currentpin == pos)
 8000766:	06d9      	lsls	r1, r3, #27
      {
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 8000768:	bf44      	itt	mi
 800076a:	f422 2270 	bicmi.w	r2, r2, #983040	; 0xf0000
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 800076e:	ea42 4204 	orrmi.w	r2, r2, r4, lsl #16
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = ((uint32_t)0x01) << pinpos;
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
      if (currentpin == pos)
 8000772:	0699      	lsls	r1, r3, #26
      {
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 8000774:	bf44      	itt	mi
 8000776:	f422 0270 	bicmi.w	r2, r2, #15728640	; 0xf00000
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 800077a:	ea42 5204 	orrmi.w	r2, r2, r4, lsl #20
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = ((uint32_t)0x01) << pinpos;
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
      if (currentpin == pos)
 800077e:	0659      	lsls	r1, r3, #25
      {
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 8000780:	bf44      	itt	mi
 8000782:	f022 6270 	bicmi.w	r2, r2, #251658240	; 0xf000000
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000786:	ea42 6204 	orrmi.w	r2, r2, r4, lsl #24
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = ((uint32_t)0x01) << pinpos;
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
      if (currentpin == pos)
 800078a:	0619      	lsls	r1, r3, #24
 800078c:	f100 809f 	bmi.w	80008ce <GPIO_Init+0x1be>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 8000790:	6002      	str	r2, [r0, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8000792:	2bff      	cmp	r3, #255	; 0xff
 8000794:	d931      	bls.n	80007fa <GPIO_Init+0xea>
 8000796:	2d48      	cmp	r5, #72	; 0x48
  {
    tmpreg = GPIOx->CRH;
 8000798:	6842      	ldr	r2, [r0, #4]
 800079a:	d030      	beq.n	80007fe <GPIO_Init+0xee>
 800079c:	2d28      	cmp	r5, #40	; 0x28
 800079e:	f000 8099 	beq.w	80008d4 <GPIO_Init+0x1c4>
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
      if (currentpin == pos)
 80007a2:	05d9      	lsls	r1, r3, #23
      {
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 80007a4:	bf44      	itt	mi
 80007a6:	f022 020f 	bicmi.w	r2, r2, #15
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80007aa:	4322      	orrmi	r2, r4
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
      if (currentpin == pos)
 80007ac:	059d      	lsls	r5, r3, #22
      {
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 80007ae:	bf44      	itt	mi
 80007b0:	f022 02f0 	bicmi.w	r2, r2, #240	; 0xf0
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80007b4:	ea42 1204 	orrmi.w	r2, r2, r4, lsl #4
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
      if (currentpin == pos)
 80007b8:	0559      	lsls	r1, r3, #21
      {
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 80007ba:	bf44      	itt	mi
 80007bc:	f422 6270 	bicmi.w	r2, r2, #3840	; 0xf00
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80007c0:	ea42 2204 	orrmi.w	r2, r2, r4, lsl #8
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
      if (currentpin == pos)
 80007c4:	051d      	lsls	r5, r3, #20
      {
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 80007c6:	bf44      	itt	mi
 80007c8:	f422 4270 	bicmi.w	r2, r2, #61440	; 0xf000
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80007cc:	ea42 3204 	orrmi.w	r2, r2, r4, lsl #12
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
      if (currentpin == pos)
 80007d0:	04d9      	lsls	r1, r3, #19
      {
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 80007d2:	bf44      	itt	mi
 80007d4:	f422 2270 	bicmi.w	r2, r2, #983040	; 0xf0000
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80007d8:	ea42 4204 	orrmi.w	r2, r2, r4, lsl #16
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
      if (currentpin == pos)
 80007dc:	049d      	lsls	r5, r3, #18
      {
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 80007de:	bf44      	itt	mi
 80007e0:	f422 0270 	bicmi.w	r2, r2, #15728640	; 0xf00000
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80007e4:	ea42 5204 	orrmi.w	r2, r2, r4, lsl #20
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
      if (currentpin == pos)
 80007e8:	0459      	lsls	r1, r3, #17
      {
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 80007ea:	bf44      	itt	mi
 80007ec:	f022 6270 	bicmi.w	r2, r2, #251658240	; 0xf000000
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80007f0:	ea42 6204 	orrmi.w	r2, r2, r4, lsl #24
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
      if (currentpin == pos)
 80007f4:	041b      	lsls	r3, r3, #16
 80007f6:	d467      	bmi.n	80008c8 <GPIO_Init+0x1b8>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
 80007f8:	6042      	str	r2, [r0, #4]
  }
}
 80007fa:	bc30      	pop	{r4, r5}
 80007fc:	4770      	bx	lr
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 80007fe:	f403 7180 	and.w	r1, r3, #256	; 0x100
      if (currentpin == pos)
 8000802:	b289      	uxth	r1, r1
 8000804:	2900      	cmp	r1, #0
 8000806:	f040 80d6 	bne.w	80009b6 <GPIO_Init+0x2a6>
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 800080a:	f403 7100 	and.w	r1, r3, #512	; 0x200
      if (currentpin == pos)
 800080e:	b289      	uxth	r1, r1
 8000810:	2900      	cmp	r1, #0
 8000812:	f040 80ca 	bne.w	80009aa <GPIO_Init+0x29a>
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8000816:	f403 6180 	and.w	r1, r3, #1024	; 0x400
      if (currentpin == pos)
 800081a:	b289      	uxth	r1, r1
 800081c:	2900      	cmp	r1, #0
 800081e:	f040 80be 	bne.w	800099e <GPIO_Init+0x28e>
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8000822:	f403 6100 	and.w	r1, r3, #2048	; 0x800
      if (currentpin == pos)
 8000826:	b289      	uxth	r1, r1
 8000828:	2900      	cmp	r1, #0
 800082a:	f040 80b2 	bne.w	8000992 <GPIO_Init+0x282>
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 800082e:	f403 5180 	and.w	r1, r3, #4096	; 0x1000
      if (currentpin == pos)
 8000832:	b289      	uxth	r1, r1
 8000834:	2900      	cmp	r1, #0
 8000836:	f040 80c9 	bne.w	80009cc <GPIO_Init+0x2bc>
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 800083a:	f403 5100 	and.w	r1, r3, #8192	; 0x2000
      if (currentpin == pos)
 800083e:	b289      	uxth	r1, r1
 8000840:	2900      	cmp	r1, #0
 8000842:	f040 80bd 	bne.w	80009c0 <GPIO_Init+0x2b0>
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8000846:	f403 4180 	and.w	r1, r3, #16384	; 0x4000
      if (currentpin == pos)
 800084a:	b289      	uxth	r1, r1
 800084c:	2900      	cmp	r1, #0
 800084e:	f040 80c3 	bne.w	80009d8 <GPIO_Init+0x2c8>
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8000852:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if (currentpin == pos)
 8000856:	b29b      	uxth	r3, r3
 8000858:	2b00      	cmp	r3, #0
 800085a:	d0cd      	beq.n	80007f8 <GPIO_Init+0xe8>
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 800085c:	f364 721f 	bfi	r2, r4, #28, #4
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000860:	6103      	str	r3, [r0, #16]
 8000862:	e7c9      	b.n	80007f8 <GPIO_Init+0xe8>
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = ((uint32_t)0x01) << pinpos;
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
      if (currentpin == pos)
 8000864:	f013 0101 	ands.w	r1, r3, #1
 8000868:	f040 8132 	bne.w	8000ad0 <GPIO_Init+0x3c0>
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = ((uint32_t)0x01) << pinpos;
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800086c:	f003 0102 	and.w	r1, r3, #2
      if (currentpin == pos)
 8000870:	b289      	uxth	r1, r1
 8000872:	2900      	cmp	r1, #0
 8000874:	f040 8126 	bne.w	8000ac4 <GPIO_Init+0x3b4>
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = ((uint32_t)0x01) << pinpos;
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000878:	f003 0104 	and.w	r1, r3, #4
      if (currentpin == pos)
 800087c:	b289      	uxth	r1, r1
 800087e:	2900      	cmp	r1, #0
 8000880:	f040 811a 	bne.w	8000ab8 <GPIO_Init+0x3a8>
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = ((uint32_t)0x01) << pinpos;
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000884:	f003 0108 	and.w	r1, r3, #8
      if (currentpin == pos)
 8000888:	b289      	uxth	r1, r1
 800088a:	2900      	cmp	r1, #0
 800088c:	f040 810e 	bne.w	8000aac <GPIO_Init+0x39c>
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = ((uint32_t)0x01) << pinpos;
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000890:	f003 0110 	and.w	r1, r3, #16
      if (currentpin == pos)
 8000894:	b289      	uxth	r1, r1
 8000896:	2900      	cmp	r1, #0
 8000898:	f040 8102 	bne.w	8000aa0 <GPIO_Init+0x390>
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = ((uint32_t)0x01) << pinpos;
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800089c:	f003 0120 	and.w	r1, r3, #32
      if (currentpin == pos)
 80008a0:	b289      	uxth	r1, r1
 80008a2:	2900      	cmp	r1, #0
 80008a4:	f040 80f6 	bne.w	8000a94 <GPIO_Init+0x384>
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = ((uint32_t)0x01) << pinpos;
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80008a8:	f003 0140 	and.w	r1, r3, #64	; 0x40
      if (currentpin == pos)
 80008ac:	b289      	uxth	r1, r1
 80008ae:	2900      	cmp	r1, #0
 80008b0:	f040 80ea 	bne.w	8000a88 <GPIO_Init+0x378>
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = ((uint32_t)0x01) << pinpos;
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80008b4:	f003 0180 	and.w	r1, r3, #128	; 0x80
      if (currentpin == pos)
 80008b8:	b289      	uxth	r1, r1
 80008ba:	2900      	cmp	r1, #0
 80008bc:	f43f af68 	beq.w	8000790 <GPIO_Init+0x80>
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80008c0:	f364 721f 	bfi	r2, r4, #28, #4
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80008c4:	6101      	str	r1, [r0, #16]
 80008c6:	e763      	b.n	8000790 <GPIO_Init+0x80>
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80008c8:	f364 721f 	bfi	r2, r4, #28, #4
 80008cc:	e794      	b.n	80007f8 <GPIO_Init+0xe8>
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80008ce:	f364 721f 	bfi	r2, r4, #28, #4
 80008d2:	e75d      	b.n	8000790 <GPIO_Init+0x80>
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 80008d4:	f403 7180 	and.w	r1, r3, #256	; 0x100
      if (currentpin == pos)
 80008d8:	b289      	uxth	r1, r1
 80008da:	2900      	cmp	r1, #0
 80008dc:	f040 80a6 	bne.w	8000a2c <GPIO_Init+0x31c>
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 80008e0:	f403 7100 	and.w	r1, r3, #512	; 0x200
      if (currentpin == pos)
 80008e4:	b289      	uxth	r1, r1
 80008e6:	2900      	cmp	r1, #0
 80008e8:	f040 809a 	bne.w	8000a20 <GPIO_Init+0x310>
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 80008ec:	f403 6180 	and.w	r1, r3, #1024	; 0x400
      if (currentpin == pos)
 80008f0:	b289      	uxth	r1, r1
 80008f2:	2900      	cmp	r1, #0
 80008f4:	f040 808e 	bne.w	8000a14 <GPIO_Init+0x304>
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 80008f8:	f403 6100 	and.w	r1, r3, #2048	; 0x800
      if (currentpin == pos)
 80008fc:	b289      	uxth	r1, r1
 80008fe:	2900      	cmp	r1, #0
 8000900:	f040 8082 	bne.w	8000a08 <GPIO_Init+0x2f8>
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8000904:	f403 5180 	and.w	r1, r3, #4096	; 0x1000
      if (currentpin == pos)
 8000908:	b289      	uxth	r1, r1
 800090a:	2900      	cmp	r1, #0
 800090c:	d176      	bne.n	80009fc <GPIO_Init+0x2ec>
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 800090e:	f403 5100 	and.w	r1, r3, #8192	; 0x2000
      if (currentpin == pos)
 8000912:	b289      	uxth	r1, r1
 8000914:	2900      	cmp	r1, #0
 8000916:	d16b      	bne.n	80009f0 <GPIO_Init+0x2e0>
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8000918:	f403 4180 	and.w	r1, r3, #16384	; 0x4000
      if (currentpin == pos)
 800091c:	b289      	uxth	r1, r1
 800091e:	2900      	cmp	r1, #0
 8000920:	d160      	bne.n	80009e4 <GPIO_Init+0x2d4>
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8000922:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if (currentpin == pos)
 8000926:	b29b      	uxth	r3, r3
 8000928:	2b00      	cmp	r3, #0
 800092a:	f43f af65 	beq.w	80007f8 <GPIO_Init+0xe8>
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 800092e:	f364 721f 	bfi	r2, r4, #28, #4
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000932:	6143      	str	r3, [r0, #20]
 8000934:	e760      	b.n	80007f8 <GPIO_Init+0xe8>
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = ((uint32_t)0x01) << pinpos;
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
      if (currentpin == pos)
 8000936:	f013 0101 	ands.w	r1, r3, #1
 800093a:	f040 809a 	bne.w	8000a72 <GPIO_Init+0x362>
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = ((uint32_t)0x01) << pinpos;
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800093e:	f003 0102 	and.w	r1, r3, #2
      if (currentpin == pos)
 8000942:	b289      	uxth	r1, r1
 8000944:	2900      	cmp	r1, #0
 8000946:	f040 808e 	bne.w	8000a66 <GPIO_Init+0x356>
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = ((uint32_t)0x01) << pinpos;
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800094a:	f003 0104 	and.w	r1, r3, #4
      if (currentpin == pos)
 800094e:	b289      	uxth	r1, r1
 8000950:	2900      	cmp	r1, #0
 8000952:	f040 8082 	bne.w	8000a5a <GPIO_Init+0x34a>
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = ((uint32_t)0x01) << pinpos;
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000956:	f003 0108 	and.w	r1, r3, #8
      if (currentpin == pos)
 800095a:	b289      	uxth	r1, r1
 800095c:	2900      	cmp	r1, #0
 800095e:	d176      	bne.n	8000a4e <GPIO_Init+0x33e>
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = ((uint32_t)0x01) << pinpos;
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000960:	f003 0110 	and.w	r1, r3, #16
      if (currentpin == pos)
 8000964:	b289      	uxth	r1, r1
 8000966:	2900      	cmp	r1, #0
 8000968:	d16b      	bne.n	8000a42 <GPIO_Init+0x332>
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = ((uint32_t)0x01) << pinpos;
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800096a:	f003 0120 	and.w	r1, r3, #32
      if (currentpin == pos)
 800096e:	b289      	uxth	r1, r1
 8000970:	2900      	cmp	r1, #0
 8000972:	d160      	bne.n	8000a36 <GPIO_Init+0x326>
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = ((uint32_t)0x01) << pinpos;
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000974:	f003 0140 	and.w	r1, r3, #64	; 0x40
      if (currentpin == pos)
 8000978:	b289      	uxth	r1, r1
 800097a:	2900      	cmp	r1, #0
 800097c:	d17e      	bne.n	8000a7c <GPIO_Init+0x36c>
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = ((uint32_t)0x01) << pinpos;
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800097e:	f003 0180 	and.w	r1, r3, #128	; 0x80
      if (currentpin == pos)
 8000982:	b289      	uxth	r1, r1
 8000984:	2900      	cmp	r1, #0
 8000986:	f43f af03 	beq.w	8000790 <GPIO_Init+0x80>
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 800098a:	f364 721f 	bfi	r2, r4, #28, #4
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 800098e:	6141      	str	r1, [r0, #20]
 8000990:	e6fe      	b.n	8000790 <GPIO_Init+0x80>
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 8000992:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000996:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800099a:	6101      	str	r1, [r0, #16]
 800099c:	e747      	b.n	800082e <GPIO_Init+0x11e>
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 800099e:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80009a2:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80009a6:	6101      	str	r1, [r0, #16]
 80009a8:	e73b      	b.n	8000822 <GPIO_Init+0x112>
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 80009aa:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80009ae:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80009b2:	6101      	str	r1, [r0, #16]
 80009b4:	e72f      	b.n	8000816 <GPIO_Init+0x106>
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 80009b6:	f022 020f 	bic.w	r2, r2, #15
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80009ba:	4322      	orrs	r2, r4
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80009bc:	6101      	str	r1, [r0, #16]
 80009be:	e724      	b.n	800080a <GPIO_Init+0xfa>
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 80009c0:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80009c4:	ea42 5204 	orr.w	r2, r2, r4, lsl #20
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80009c8:	6101      	str	r1, [r0, #16]
 80009ca:	e73c      	b.n	8000846 <GPIO_Init+0x136>
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 80009cc:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80009d0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80009d4:	6101      	str	r1, [r0, #16]
 80009d6:	e730      	b.n	800083a <GPIO_Init+0x12a>
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 80009d8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80009dc:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80009e0:	6101      	str	r1, [r0, #16]
 80009e2:	e736      	b.n	8000852 <GPIO_Init+0x142>
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 80009e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80009e8:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80009ec:	6141      	str	r1, [r0, #20]
 80009ee:	e798      	b.n	8000922 <GPIO_Init+0x212>
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 80009f0:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80009f4:	ea42 5204 	orr.w	r2, r2, r4, lsl #20
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80009f8:	6141      	str	r1, [r0, #20]
 80009fa:	e78d      	b.n	8000918 <GPIO_Init+0x208>
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 80009fc:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000a00:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000a04:	6141      	str	r1, [r0, #20]
 8000a06:	e782      	b.n	800090e <GPIO_Init+0x1fe>
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 8000a08:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000a0c:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000a10:	6141      	str	r1, [r0, #20]
 8000a12:	e777      	b.n	8000904 <GPIO_Init+0x1f4>
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 8000a14:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000a18:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000a1c:	6141      	str	r1, [r0, #20]
 8000a1e:	e76b      	b.n	80008f8 <GPIO_Init+0x1e8>
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 8000a20:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000a24:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000a28:	6141      	str	r1, [r0, #20]
 8000a2a:	e75f      	b.n	80008ec <GPIO_Init+0x1dc>
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 8000a2c:	f022 020f 	bic.w	r2, r2, #15
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000a30:	4322      	orrs	r2, r4
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000a32:	6141      	str	r1, [r0, #20]
 8000a34:	e754      	b.n	80008e0 <GPIO_Init+0x1d0>
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 8000a36:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000a3a:	ea42 5204 	orr.w	r2, r2, r4, lsl #20
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8000a3e:	6141      	str	r1, [r0, #20]
 8000a40:	e798      	b.n	8000974 <GPIO_Init+0x264>
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 8000a42:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000a46:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8000a4a:	6141      	str	r1, [r0, #20]
 8000a4c:	e78d      	b.n	800096a <GPIO_Init+0x25a>
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 8000a4e:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000a52:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8000a56:	6141      	str	r1, [r0, #20]
 8000a58:	e782      	b.n	8000960 <GPIO_Init+0x250>
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 8000a5a:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000a5e:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8000a62:	6141      	str	r1, [r0, #20]
 8000a64:	e777      	b.n	8000956 <GPIO_Init+0x246>
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 8000a66:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000a6a:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8000a6e:	6141      	str	r1, [r0, #20]
 8000a70:	e76b      	b.n	800094a <GPIO_Init+0x23a>
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 8000a72:	f022 020f 	bic.w	r2, r2, #15
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000a76:	4322      	orrs	r2, r4
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8000a78:	6141      	str	r1, [r0, #20]
 8000a7a:	e760      	b.n	800093e <GPIO_Init+0x22e>
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 8000a7c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000a80:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8000a84:	6141      	str	r1, [r0, #20]
 8000a86:	e77a      	b.n	800097e <GPIO_Init+0x26e>
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 8000a88:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000a8c:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8000a90:	6101      	str	r1, [r0, #16]
 8000a92:	e70f      	b.n	80008b4 <GPIO_Init+0x1a4>
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 8000a94:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000a98:	ea42 5204 	orr.w	r2, r2, r4, lsl #20
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8000a9c:	6101      	str	r1, [r0, #16]
 8000a9e:	e703      	b.n	80008a8 <GPIO_Init+0x198>
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 8000aa0:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000aa4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8000aa8:	6101      	str	r1, [r0, #16]
 8000aaa:	e6f7      	b.n	800089c <GPIO_Init+0x18c>
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 8000aac:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000ab0:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8000ab4:	6101      	str	r1, [r0, #16]
 8000ab6:	e6eb      	b.n	8000890 <GPIO_Init+0x180>
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 8000ab8:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000abc:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8000ac0:	6101      	str	r1, [r0, #16]
 8000ac2:	e6df      	b.n	8000884 <GPIO_Init+0x174>
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 8000ac4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000ac8:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8000acc:	6101      	str	r1, [r0, #16]
 8000ace:	e6d3      	b.n	8000878 <GPIO_Init+0x168>
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 8000ad0:	f022 020f 	bic.w	r2, r2, #15
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000ad4:	4322      	orrs	r2, r4
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8000ad6:	6101      	str	r1, [r0, #16]
 8000ad8:	e6c8      	b.n	800086c <GPIO_Init+0x15c>
 8000ada:	bf00      	nop

08000adc <GPIO_StructInit>:
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8000adc:	f64f 71ff 	movw	r1, #65535	; 0xffff
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8000ae0:	2202      	movs	r2, #2
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8000ae2:	2304      	movs	r3, #4
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8000ae4:	8001      	strh	r1, [r0, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8000ae6:	7082      	strb	r2, [r0, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8000ae8:	70c3      	strb	r3, [r0, #3]
 8000aea:	4770      	bx	lr

08000aec <GPIO_ReadInputDataBit>:
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000aec:	6883      	ldr	r3, [r0, #8]
 8000aee:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 8000af0:	bf14      	ite	ne
 8000af2:	2001      	movne	r0, #1
 8000af4:	2000      	moveq	r0, #0
 8000af6:	4770      	bx	lr

08000af8 <GPIO_ReadInputData>:
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  return ((uint16_t)GPIOx->IDR);
 8000af8:	6880      	ldr	r0, [r0, #8]
}
 8000afa:	b280      	uxth	r0, r0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <GPIO_ReadOutputDataBit>:
  uint8_t bitstatus = 0x00;
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000b00:	68c3      	ldr	r3, [r0, #12]
 8000b02:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 8000b04:	bf14      	ite	ne
 8000b06:	2001      	movne	r0, #1
 8000b08:	2000      	moveq	r0, #0
 8000b0a:	4770      	bx	lr

08000b0c <GPIO_ReadOutputData>:
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    
  return ((uint16_t)GPIOx->ODR);
 8000b0c:	68c0      	ldr	r0, [r0, #12]
}
 8000b0e:	b280      	uxth	r0, r0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 8000b14:	6101      	str	r1, [r0, #16]
 8000b16:	4770      	bx	lr

08000b18 <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 8000b18:	6141      	str	r1, [r0, #20]
 8000b1a:	4770      	bx	lr

08000b1c <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
  
  if (BitVal != Bit_RESET)
 8000b1c:	b90a      	cbnz	r2, 8000b22 <GPIO_WriteBit+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
 8000b1e:	6141      	str	r1, [r0, #20]
 8000b20:	4770      	bx	lr
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
  
  if (BitVal != Bit_RESET)
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b22:	6101      	str	r1, [r0, #16]
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <GPIO_Write>:
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  GPIOx->ODR = PortVal;
 8000b28:	60c1      	str	r1, [r0, #12]
 8000b2a:	4770      	bx	lr

08000b2c <GPIO_PinLockConfig>:
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  tmp |= GPIO_Pin;
 8000b2c:	f441 3380 	orr.w	r3, r1, #65536	; 0x10000
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8000b30:	6183      	str	r3, [r0, #24]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 8000b32:	6181      	str	r1, [r0, #24]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8000b34:	6183      	str	r3, [r0, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8000b36:	6983      	ldr	r3, [r0, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8000b38:	6983      	ldr	r3, [r0, #24]
 8000b3a:	4770      	bx	lr

08000b3c <GPIO_EventOutputConfig>:
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
    
  tmpreg = AFIO->EVCR;
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
 8000b3c:	f64f 7380 	movw	r3, #65408	; 0xff80
  uint32_t tmpreg = 0x00;
  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
    
  tmpreg = AFIO->EVCR;
 8000b40:	4a05      	ldr	r2, [pc, #20]	; (8000b58 <GPIO_EventOutputConfig+0x1c>)
  * @param  GPIO_PinSource: specifies the pin for the Event output.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EventOutputConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
 8000b42:	b410      	push	{r4}
  uint32_t tmpreg = 0x00;
  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
    
  tmpreg = AFIO->EVCR;
 8000b44:	6814      	ldr	r4, [r2, #0]
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
 8000b46:	4023      	ands	r3, r4
 8000b48:	4319      	orrs	r1, r3
  tmpreg |= (uint32_t)GPIO_PortSource << 0x04;
  tmpreg |= GPIO_PinSource;
 8000b4a:	ea41 1000 	orr.w	r0, r1, r0, lsl #4
  AFIO->EVCR = tmpreg;
 8000b4e:	6010      	str	r0, [r2, #0]
}
 8000b50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	40010000 	.word	0x40010000

08000b5c <GPIO_EventOutputCmd>:
void GPIO_EventOutputCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) EVCR_EVOE_BB = (uint32_t)NewState;
 8000b5c:	4b01      	ldr	r3, [pc, #4]	; (8000b64 <GPIO_EventOutputCmd+0x8>)
 8000b5e:	6018      	str	r0, [r3, #0]
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	4220001c 	.word	0x4220001c

08000b68 <GPIO_PinRemapConfig>:

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if((GPIO_Remap & 0x80000000) == 0x80000000)
 8000b68:	2800      	cmp	r0, #0
  {
    tmpreg = AFIO->MAPR2;
 8000b6a:	4b19      	ldr	r3, [pc, #100]	; (8000bd0 <GPIO_PinRemapConfig+0x68>)
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
  tmp = GPIO_Remap & LSB_MASK;

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 8000b6c:	f400 1240 	and.w	r2, r0, #3145728	; 0x300000
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if((GPIO_Remap & 0x80000000) == 0x80000000)
  {
    tmpreg = AFIO->MAPR2;
 8000b70:	bfb4      	ite	lt
 8000b72:	69db      	ldrlt	r3, [r3, #28]
  }
  else
  {
    tmpreg = AFIO->MAPR;
 8000b74:	685b      	ldrge	r3, [r3, #4]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
  tmp = GPIO_Remap & LSB_MASK;

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 8000b76:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
 8000b7a:	b430      	push	{r4, r5}
  {
    tmpreg = AFIO->MAPR;
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
  tmp = GPIO_Remap & LSB_MASK;
 8000b7c:	b284      	uxth	r4, r0

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 8000b7e:	d01e      	beq.n	8000bbe <GPIO_PinRemapConfig+0x56>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
 8000b80:	02c2      	lsls	r2, r0, #11
 8000b82:	d513      	bpl.n	8000bac <GPIO_PinRemapConfig+0x44>
  else
  {
    tmpreg = AFIO->MAPR;
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
 8000b84:	f3c0 4503 	ubfx	r5, r0, #16, #4
    tmpreg &= DBGAFR_SWJCFG_MASK;
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
 8000b88:	2203      	movs	r2, #3
 8000b8a:	40aa      	lsls	r2, r5
    tmpreg &= ~tmp1;
 8000b8c:	ea23 0302 	bic.w	r3, r3, r2
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 8000b90:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
  }

  if (NewState != DISABLE)
 8000b94:	b119      	cbz	r1, 8000b9e <GPIO_PinRemapConfig+0x36>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
 8000b96:	0d42      	lsrs	r2, r0, #21
 8000b98:	0112      	lsls	r2, r2, #4
 8000b9a:	4094      	lsls	r4, r2
 8000b9c:	4323      	orrs	r3, r4
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
  {
    AFIO->MAPR2 = tmpreg;
 8000b9e:	4a0c      	ldr	r2, [pc, #48]	; (8000bd0 <GPIO_PinRemapConfig+0x68>)
  if (NewState != DISABLE)
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
 8000ba0:	2800      	cmp	r0, #0
  {
    AFIO->MAPR2 = tmpreg;
 8000ba2:	bfb4      	ite	lt
 8000ba4:	61d3      	strlt	r3, [r2, #28]
  }
  else
  {
    AFIO->MAPR = tmpreg;
 8000ba6:	6053      	strge	r3, [r2, #4]
  }  
}
 8000ba8:	bc30      	pop	{r4, r5}
 8000baa:	4770      	bx	lr
    tmpreg &= ~tmp1;
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
 8000bac:	0d42      	lsrs	r2, r0, #21
 8000bae:	0112      	lsls	r2, r2, #4
 8000bb0:	fa04 f202 	lsl.w	r2, r4, r2
 8000bb4:	ea23 0302 	bic.w	r3, r3, r2
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 8000bb8:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8000bbc:	e7ea      	b.n	8000b94 <GPIO_PinRemapConfig+0x2c>
  tmp = GPIO_Remap & LSB_MASK;

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 8000bbe:	4d04      	ldr	r5, [pc, #16]	; (8000bd0 <GPIO_PinRemapConfig+0x68>)
  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
  tmp = GPIO_Remap & LSB_MASK;

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
 8000bc0:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 8000bc4:	686a      	ldr	r2, [r5, #4]
 8000bc6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000bca:	606a      	str	r2, [r5, #4]
 8000bcc:	e7e2      	b.n	8000b94 <GPIO_PinRemapConfig+0x2c>
 8000bce:	bf00      	nop
 8000bd0:	40010000 	.word	0x40010000

08000bd4 <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
 8000bd4:	f001 03fc 	and.w	r3, r1, #252	; 0xfc
 8000bd8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000bdc:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
  uint32_t tmp = 0x00;
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
 8000be0:	f001 0103 	and.w	r1, r1, #3
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
 8000be4:	b410      	push	{r4}
  uint32_t tmp = 0x00;
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
 8000be6:	0089      	lsls	r1, r1, #2
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 8000be8:	689c      	ldr	r4, [r3, #8]
  uint32_t tmp = 0x00;
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
 8000bea:	220f      	movs	r2, #15
 8000bec:	408a      	lsls	r2, r1
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 8000bee:	ea24 0202 	bic.w	r2, r4, r2
 8000bf2:	609a      	str	r2, [r3, #8]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
 8000bf4:	689a      	ldr	r2, [r3, #8]
 8000bf6:	4088      	lsls	r0, r1
 8000bf8:	4302      	orrs	r2, r0
 8000bfa:	609a      	str	r2, [r3, #8]
}
 8000bfc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop

08000c04 <GPIO_ETH_MediaInterfaceConfig>:
void GPIO_ETH_MediaInterfaceConfig(uint32_t GPIO_ETH_MediaInterface) 
{ 
  assert_param(IS_GPIO_ETH_MEDIA_INTERFACE(GPIO_ETH_MediaInterface)); 

  /* Configure MII_RMII selection bit */ 
  *(__IO uint32_t *) MAPR_MII_RMII_SEL_BB = GPIO_ETH_MediaInterface; 
 8000c04:	4b01      	ldr	r3, [pc, #4]	; (8000c0c <GPIO_ETH_MediaInterfaceConfig+0x8>)
 8000c06:	6018      	str	r0, [r3, #0]
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	422000dc 	.word	0x422000dc

08000c10 <RCC_DeInit>:
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000c10:	4b0d      	ldr	r3, [pc, #52]	; (8000c48 <RCC_DeInit+0x38>)

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000c12:	4a0e      	ldr	r2, [pc, #56]	; (8000c4c <RCC_DeInit+0x3c>)
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000c14:	6819      	ldr	r1, [r3, #0]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8000c16:	f44f 001f 	mov.w	r0, #10420224	; 0x9f0000
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000c1a:	f041 0101 	orr.w	r1, r1, #1
 8000c1e:	6019      	str	r1, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000c20:	6859      	ldr	r1, [r3, #4]
 8000c22:	400a      	ands	r2, r1
 8000c24:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000c2c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000c30:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000c38:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000c3a:	685a      	ldr	r2, [r3, #4]
 8000c3c:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8000c40:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8000c42:	6098      	str	r0, [r3, #8]
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	40021000 	.word	0x40021000
 8000c4c:	f8ff0000 	.word	0xf8ff0000

08000c50 <RCC_HSEConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
 8000c50:	4b0c      	ldr	r3, [pc, #48]	; (8000c84 <RCC_HSEConfig+0x34>)
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
 8000c52:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
{
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
 8000c56:	681a      	ldr	r2, [r3, #0]
 8000c58:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000c5c:	601a      	str	r2, [r3, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000c64:	601a      	str	r2, [r3, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
 8000c66:	d008      	beq.n	8000c7a <RCC_HSEConfig+0x2a>
 8000c68:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
 8000c6c:	d104      	bne.n	8000c78 <RCC_HSEConfig+0x28>
      RCC->CR |= CR_HSEON_Set;
      break;
      
    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
 8000c6e:	681a      	ldr	r2, [r3, #0]
 8000c70:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
 8000c74:	601a      	str	r2, [r3, #0]
 8000c76:	4770      	bx	lr
 8000c78:	4770      	bx	lr
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000c80:	601a      	str	r2, [r3, #0]
      break;
 8000c82:	4770      	bx	lr
 8000c84:	40021000 	.word	0x40021000

08000c88 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumuration value:
  * - SUCCESS: HSE oscillator is stable and ready to use
  * - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8000c88:	b082      	sub	sp, #8
  __IO uint32_t StartUpCounter = 0;
 8000c8a:	2300      	movs	r3, #0

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 8000c8c:	4a0a      	ldr	r2, [pc, #40]	; (8000cb8 <RCC_WaitForHSEStartUp+0x30>)
  * - SUCCESS: HSE oscillator is stable and ready to use
  * - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
  __IO uint32_t StartUpCounter = 0;
 8000c8e:	9301      	str	r3, [sp, #4]
 8000c90:	e002      	b.n	8000c98 <RCC_WaitForHSEStartUp+0x10>
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
    StartUpCounter++;  
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 8000c92:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000c96:	d008      	beq.n	8000caa <RCC_WaitForHSEStartUp+0x22>

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 8000c98:	6813      	ldr	r3, [r2, #0]
    statusreg = RCC->CSR;
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8000c9a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
    StartUpCounter++;  
 8000c9e:	9b01      	ldr	r3, [sp, #4]
 8000ca0:	f103 0301 	add.w	r3, r3, #1
 8000ca4:	9301      	str	r3, [sp, #4]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 8000ca6:	9b01      	ldr	r3, [sp, #4]
    statusreg = RCC->CSR;
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8000ca8:	d0f3      	beq.n	8000c92 <RCC_WaitForHSEStartUp+0xa>

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 8000caa:	4b03      	ldr	r3, [pc, #12]	; (8000cb8 <RCC_WaitForHSEStartUp+0x30>)
 8000cac:	6818      	ldr	r0, [r3, #0]
  }
  else
  {
    status = ERROR;
  }  
  return (status);
 8000cae:	f3c0 4040 	ubfx	r0, r0, #17, #1
}
 8000cb2:	b002      	add	sp, #8
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	40021000 	.word	0x40021000

08000cbc <RCC_AdjustHSICalibrationValue>:
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
  tmpreg = RCC->CR;
 8000cbc:	4a03      	ldr	r2, [pc, #12]	; (8000ccc <RCC_AdjustHSICalibrationValue+0x10>)
 8000cbe:	6813      	ldr	r3, [r2, #0]
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= CR_HSITRIM_Mask;
 8000cc0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 8000cc4:	ea43 00c0 	orr.w	r0, r3, r0, lsl #3
  /* Store the new value */
  RCC->CR = tmpreg;
 8000cc8:	6010      	str	r0, [r2, #0]
 8000cca:	4770      	bx	lr
 8000ccc:	40021000 	.word	0x40021000

08000cd0 <RCC_HSICmd>:
  */
void RCC_HSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 8000cd0:	4b01      	ldr	r3, [pc, #4]	; (8000cd8 <RCC_HSICmd+0x8>)
 8000cd2:	6018      	str	r0, [r3, #0]
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	42420000 	.word	0x42420000

08000cdc <RCC_PLLConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
 8000cdc:	4a03      	ldr	r2, [pc, #12]	; (8000cec <RCC_PLLConfig+0x10>)
 8000cde:	6853      	ldr	r3, [r2, #4]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
 8000ce0:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8000ce4:	4319      	orrs	r1, r3
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
 8000ce6:	4308      	orrs	r0, r1
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000ce8:	6050      	str	r0, [r2, #4]
 8000cea:	4770      	bx	lr
 8000cec:	40021000 	.word	0x40021000

08000cf0 <RCC_PLLCmd>:
void RCC_PLLCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 8000cf0:	4b01      	ldr	r3, [pc, #4]	; (8000cf8 <RCC_PLLCmd+0x8>)
 8000cf2:	6018      	str	r0, [r3, #0]
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	42420060 	.word	0x42420060

08000cfc <RCC_SYSCLKConfig>:
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
 8000cfc:	4a03      	ldr	r2, [pc, #12]	; (8000d0c <RCC_SYSCLKConfig+0x10>)
 8000cfe:	6853      	ldr	r3, [r2, #4]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
 8000d00:	f023 0303 	bic.w	r3, r3, #3
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8000d04:	4318      	orrs	r0, r3
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000d06:	6050      	str	r0, [r2, #4]
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	40021000 	.word	0x40021000

08000d10 <RCC_GetSYSCLKSource>:
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
 8000d10:	4b02      	ldr	r3, [pc, #8]	; (8000d1c <RCC_GetSYSCLKSource+0xc>)
 8000d12:	6858      	ldr	r0, [r3, #4]
}
 8000d14:	f000 000c 	and.w	r0, r0, #12
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	40021000 	.word	0x40021000

08000d20 <RCC_HCLKConfig>:
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
 8000d20:	4a03      	ldr	r2, [pc, #12]	; (8000d30 <RCC_HCLKConfig+0x10>)
 8000d22:	6853      	ldr	r3, [r2, #4]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
 8000d24:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 8000d28:	4318      	orrs	r0, r3
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000d2a:	6050      	str	r0, [r2, #4]
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	40021000 	.word	0x40021000

08000d34 <RCC_PCLK1Config>:
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
 8000d34:	4a03      	ldr	r2, [pc, #12]	; (8000d44 <RCC_PCLK1Config+0x10>)
 8000d36:	6853      	ldr	r3, [r2, #4]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
 8000d38:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 8000d3c:	4318      	orrs	r0, r3
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000d3e:	6050      	str	r0, [r2, #4]
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	40021000 	.word	0x40021000

08000d48 <RCC_PCLK2Config>:
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
 8000d48:	4a03      	ldr	r2, [pc, #12]	; (8000d58 <RCC_PCLK2Config+0x10>)
 8000d4a:	6853      	ldr	r3, [r2, #4]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
 8000d4c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 8000d50:	ea43 00c0 	orr.w	r0, r3, r0, lsl #3
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000d54:	6050      	str	r0, [r2, #4]
 8000d56:	4770      	bx	lr
 8000d58:	40021000 	.word	0x40021000

08000d5c <RCC_ITConfig>:
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8000d5c:	4a04      	ldr	r2, [pc, #16]	; (8000d70 <RCC_ITConfig+0x14>)
 8000d5e:	7813      	ldrb	r3, [r2, #0]
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000d60:	b919      	cbnz	r1, 8000d6a <RCC_ITConfig+0xe>
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
  }
  else
  {
    /* Perform Byte access to RCC_CIR bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 8000d62:	ea23 0000 	bic.w	r0, r3, r0
 8000d66:	7010      	strb	r0, [r2, #0]
 8000d68:	4770      	bx	lr
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8000d6a:	4318      	orrs	r0, r3
 8000d6c:	7010      	strb	r0, [r2, #0]
 8000d6e:	4770      	bx	lr
 8000d70:	40021009 	.word	0x40021009

08000d74 <RCC_USBCLKConfig>:
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
 8000d74:	4b01      	ldr	r3, [pc, #4]	; (8000d7c <RCC_USBCLKConfig+0x8>)
 8000d76:	6018      	str	r0, [r3, #0]
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	424200d8 	.word	0x424200d8

08000d80 <RCC_ADCCLKConfig>:
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
 8000d80:	4a03      	ldr	r2, [pc, #12]	; (8000d90 <RCC_ADCCLKConfig+0x10>)
 8000d82:	6853      	ldr	r3, [r2, #4]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
 8000d84:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
 8000d88:	4318      	orrs	r0, r3
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000d8a:	6050      	str	r0, [r2, #4]
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	40021000 	.word	0x40021000

08000d94 <RCC_LSEConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8000d94:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <RCC_LSEConfig+0x1c>)
 8000d96:	2200      	movs	r2, #0
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
 8000d98:	2801      	cmp	r0, #1
{
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8000d9a:	701a      	strb	r2, [r3, #0]
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8000d9c:	701a      	strb	r2, [r3, #0]
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
 8000d9e:	d005      	beq.n	8000dac <RCC_LSEConfig+0x18>
 8000da0:	2804      	cmp	r0, #4
 8000da2:	d102      	bne.n	8000daa <RCC_LSEConfig+0x16>
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
      break;
      
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 8000da4:	2205      	movs	r2, #5
 8000da6:	701a      	strb	r2, [r3, #0]
 8000da8:	4770      	bx	lr
 8000daa:	4770      	bx	lr
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 8000dac:	7018      	strb	r0, [r3, #0]
      break;
 8000dae:	4770      	bx	lr
 8000db0:	40021020 	.word	0x40021020

08000db4 <RCC_LSICmd>:
  */
void RCC_LSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 8000db4:	4b01      	ldr	r3, [pc, #4]	; (8000dbc <RCC_LSICmd+0x8>)
 8000db6:	6018      	str	r0, [r3, #0]
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	42420480 	.word	0x42420480

08000dc0 <RCC_RTCCLKConfig>:
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
 8000dc0:	4a02      	ldr	r2, [pc, #8]	; (8000dcc <RCC_RTCCLKConfig+0xc>)
 8000dc2:	6a13      	ldr	r3, [r2, #32]
 8000dc4:	4318      	orrs	r0, r3
 8000dc6:	6210      	str	r0, [r2, #32]
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	40021000 	.word	0x40021000

08000dd0 <RCC_RTCCLKCmd>:
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 8000dd0:	4b01      	ldr	r3, [pc, #4]	; (8000dd8 <RCC_RTCCLKCmd+0x8>)
 8000dd2:	6018      	str	r0, [r3, #0]
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	4242043c 	.word	0x4242043c

08000ddc <RCC_GetClocksFreq>:
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8000ddc:	4a22      	ldr	r2, [pc, #136]	; (8000e68 <RCC_GetClocksFreq+0x8c>)
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000dde:	b410      	push	{r4}
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8000de0:	6853      	ldr	r3, [r2, #4]
 8000de2:	f003 030c 	and.w	r3, r3, #12
  
  switch (tmp)
 8000de6:	2b04      	cmp	r3, #4
 8000de8:	d006      	beq.n	8000df8 <RCC_GetClocksFreq+0x1c>
 8000dea:	2b08      	cmp	r3, #8
 8000dec:	d026      	beq.n	8000e3c <RCC_GetClocksFreq+0x60>
 8000dee:	b11b      	cbz	r3, 8000df8 <RCC_GetClocksFreq+0x1c>
      }
#endif /* STM32F10X_CL */ 
      break;

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000df0:	4a1e      	ldr	r2, [pc, #120]	; (8000e6c <RCC_GetClocksFreq+0x90>)
      break;
 8000df2:	4613      	mov	r3, r2
      }
#endif /* STM32F10X_CL */ 
      break;

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000df4:	6002      	str	r2, [r0, #0]
      break;
 8000df6:	e001      	b.n	8000dfc <RCC_GetClocksFreq+0x20>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000df8:	4b1c      	ldr	r3, [pc, #112]	; (8000e6c <RCC_GetClocksFreq+0x90>)
 8000dfa:	6003      	str	r3, [r0, #0]
      break;
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8000dfc:	4a1a      	ldr	r2, [pc, #104]	; (8000e68 <RCC_GetClocksFreq+0x8c>)
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];
 8000dfe:	491c      	ldr	r1, [pc, #112]	; (8000e70 <RCC_GetClocksFreq+0x94>)
      break;
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8000e00:	6854      	ldr	r4, [r2, #4]
  tmp = tmp >> 4;
 8000e02:	f3c4 1403 	ubfx	r4, r4, #4, #4
  presc = APBAHBPrescTable[tmp];
 8000e06:	5d0c      	ldrb	r4, [r1, r4]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000e08:	40e3      	lsrs	r3, r4
 8000e0a:	6043      	str	r3, [r0, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8000e0c:	6854      	ldr	r4, [r2, #4]
  tmp = tmp >> 8;
 8000e0e:	f3c4 2402 	ubfx	r4, r4, #8, #3
  presc = APBAHBPrescTable[tmp];
 8000e12:	5d0c      	ldrb	r4, [r1, r4]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000e14:	fa23 f404 	lsr.w	r4, r3, r4
 8000e18:	6084      	str	r4, [r0, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8000e1a:	6854      	ldr	r4, [r2, #4]
  tmp = tmp >> 11;
 8000e1c:	f3c4 24c2 	ubfx	r4, r4, #11, #3
  presc = APBAHBPrescTable[tmp];
 8000e20:	5d0c      	ldrb	r4, [r1, r4]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000e22:	40e3      	lsrs	r3, r4
 8000e24:	60c3      	str	r3, [r0, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8000e26:	6852      	ldr	r2, [r2, #4]
  tmp = tmp >> 14;
  presc = ADCPrescTable[tmp];
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
}
 8000e28:	f85d 4b04 	ldr.w	r4, [sp], #4
  presc = APBAHBPrescTable[tmp];
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
  tmp = tmp >> 14;
 8000e2c:	f3c2 3281 	ubfx	r2, r2, #14, #2
  presc = ADCPrescTable[tmp];
 8000e30:	440a      	add	r2, r1
 8000e32:	7c12      	ldrb	r2, [r2, #16]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8000e34:	fbb3 f3f2 	udiv	r3, r3, r2
 8000e38:	6103      	str	r3, [r0, #16]
}
 8000e3a:	4770      	bx	lr
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
      break;
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 8000e3c:	6853      	ldr	r3, [r2, #4]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 8000e3e:	6851      	ldr	r1, [r2, #4]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 8000e40:	f3c3 4383 	ubfx	r3, r3, #18, #4
      
      if (pllsource == 0x00)
 8000e44:	03c9      	lsls	r1, r1, #15
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 8000e46:	f103 0302 	add.w	r3, r3, #2
      
      if (pllsource == 0x00)
 8000e4a:	d507      	bpl.n	8000e5c <RCC_GetClocksFreq+0x80>
       prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull; 
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 8000e4c:	6852      	ldr	r2, [r2, #4]
 8000e4e:	0392      	lsls	r2, r2, #14
 8000e50:	d404      	bmi.n	8000e5c <RCC_GetClocksFreq+0x80>
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 8000e52:	4a06      	ldr	r2, [pc, #24]	; (8000e6c <RCC_GetClocksFreq+0x90>)
 8000e54:	fb02 f303 	mul.w	r3, r2, r3
 8000e58:	6003      	str	r3, [r0, #0]
 8000e5a:	e7cf      	b.n	8000dfc <RCC_GetClocksFreq+0x20>
       RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull; 
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 8000e5c:	4a05      	ldr	r2, [pc, #20]	; (8000e74 <RCC_GetClocksFreq+0x98>)
 8000e5e:	fb02 f303 	mul.w	r3, r2, r3
 8000e62:	6003      	str	r3, [r0, #0]
 8000e64:	e7ca      	b.n	8000dfc <RCC_GetClocksFreq+0x20>
 8000e66:	bf00      	nop
 8000e68:	40021000 	.word	0x40021000
 8000e6c:	007a1200 	.word	0x007a1200
 8000e70:	20000014 	.word	0x20000014
 8000e74:	003d0900 	.word	0x003d0900

08000e78 <RCC_AHBPeriphClockCmd>:
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8000e78:	4a04      	ldr	r2, [pc, #16]	; (8000e8c <RCC_AHBPeriphClockCmd+0x14>)
 8000e7a:	6953      	ldr	r3, [r2, #20]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000e7c:	b919      	cbnz	r1, 8000e86 <RCC_AHBPeriphClockCmd+0xe>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8000e7e:	ea23 0000 	bic.w	r0, r3, r0
 8000e82:	6150      	str	r0, [r2, #20]
 8000e84:	4770      	bx	lr
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8000e86:	4318      	orrs	r0, r3
 8000e88:	6150      	str	r0, [r2, #20]
 8000e8a:	4770      	bx	lr
 8000e8c:	40021000 	.word	0x40021000

08000e90 <RCC_APB2PeriphClockCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000e90:	4a04      	ldr	r2, [pc, #16]	; (8000ea4 <RCC_APB2PeriphClockCmd+0x14>)
 8000e92:	6993      	ldr	r3, [r2, #24]
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000e94:	b919      	cbnz	r1, 8000e9e <RCC_APB2PeriphClockCmd+0xe>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000e96:	ea23 0000 	bic.w	r0, r3, r0
 8000e9a:	6190      	str	r0, [r2, #24]
 8000e9c:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000e9e:	4318      	orrs	r0, r3
 8000ea0:	6190      	str	r0, [r2, #24]
 8000ea2:	4770      	bx	lr
 8000ea4:	40021000 	.word	0x40021000

08000ea8 <RCC_APB1PeriphClockCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000ea8:	4a04      	ldr	r2, [pc, #16]	; (8000ebc <RCC_APB1PeriphClockCmd+0x14>)
 8000eaa:	69d3      	ldr	r3, [r2, #28]
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000eac:	b919      	cbnz	r1, 8000eb6 <RCC_APB1PeriphClockCmd+0xe>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000eae:	ea23 0000 	bic.w	r0, r3, r0
 8000eb2:	61d0      	str	r0, [r2, #28]
 8000eb4:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000eb6:	4318      	orrs	r0, r3
 8000eb8:	61d0      	str	r0, [r2, #28]
 8000eba:	4770      	bx	lr
 8000ebc:	40021000 	.word	0x40021000

08000ec0 <RCC_APB2PeriphResetCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8000ec0:	4a04      	ldr	r2, [pc, #16]	; (8000ed4 <RCC_APB2PeriphResetCmd+0x14>)
 8000ec2:	68d3      	ldr	r3, [r2, #12]
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000ec4:	b919      	cbnz	r1, 8000ece <RCC_APB2PeriphResetCmd+0xe>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8000ec6:	ea23 0000 	bic.w	r0, r3, r0
 8000eca:	60d0      	str	r0, [r2, #12]
 8000ecc:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8000ece:	4318      	orrs	r0, r3
 8000ed0:	60d0      	str	r0, [r2, #12]
 8000ed2:	4770      	bx	lr
 8000ed4:	40021000 	.word	0x40021000

08000ed8 <RCC_APB1PeriphResetCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8000ed8:	4a04      	ldr	r2, [pc, #16]	; (8000eec <RCC_APB1PeriphResetCmd+0x14>)
 8000eda:	6913      	ldr	r3, [r2, #16]
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000edc:	b919      	cbnz	r1, 8000ee6 <RCC_APB1PeriphResetCmd+0xe>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8000ede:	ea23 0000 	bic.w	r0, r3, r0
 8000ee2:	6110      	str	r0, [r2, #16]
 8000ee4:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8000ee6:	4318      	orrs	r0, r3
 8000ee8:	6110      	str	r0, [r2, #16]
 8000eea:	4770      	bx	lr
 8000eec:	40021000 	.word	0x40021000

08000ef0 <RCC_BackupResetCmd>:
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 8000ef0:	4b01      	ldr	r3, [pc, #4]	; (8000ef8 <RCC_BackupResetCmd+0x8>)
 8000ef2:	6018      	str	r0, [r3, #0]
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	42420440 	.word	0x42420440

08000efc <RCC_ClockSecuritySystemCmd>:
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 8000efc:	4b01      	ldr	r3, [pc, #4]	; (8000f04 <RCC_ClockSecuritySystemCmd+0x8>)
 8000efe:	6018      	str	r0, [r3, #0]
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	4242004c 	.word	0x4242004c

08000f08 <RCC_MCOConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO bits to select the MCO source */
  *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
 8000f08:	4b01      	ldr	r3, [pc, #4]	; (8000f10 <RCC_MCOConfig+0x8>)
 8000f0a:	7018      	strb	r0, [r3, #0]
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	40021007 	.word	0x40021007

08000f14 <RCC_GetFlagStatus>:
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8000f14:	0943      	lsrs	r3, r0, #5
  if (tmp == 1)               /* The flag to check is in CR register */
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d00b      	beq.n	8000f32 <RCC_GetFlagStatus+0x1e>
  {
    statusreg = RCC->CR;
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8000f1a:	2b02      	cmp	r3, #2
  {
    statusreg = RCC->BDCR;
 8000f1c:	4b09      	ldr	r3, [pc, #36]	; (8000f44 <RCC_GetFlagStatus+0x30>)
 8000f1e:	bf0c      	ite	eq
 8000f20:	6a1a      	ldreq	r2, [r3, #32]
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8000f22:	6a5a      	ldrne	r2, [r3, #36]	; 0x24
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8000f24:	f000 031f 	and.w	r3, r0, #31
 8000f28:	fa22 f003 	lsr.w	r0, r2, r3
    bitstatus = RESET;
  }

  /* Return the flag status */
  return bitstatus;
}
 8000f2c:	f000 0001 	and.w	r0, r0, #1
 8000f30:	4770      	bx	lr

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 8000f32:	4b04      	ldr	r3, [pc, #16]	; (8000f44 <RCC_GetFlagStatus+0x30>)
 8000f34:	681a      	ldr	r2, [r3, #0]
    statusreg = RCC->CSR;
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8000f36:	f000 031f 	and.w	r3, r0, #31
 8000f3a:	fa22 f003 	lsr.w	r0, r2, r3
    bitstatus = RESET;
  }

  /* Return the flag status */
  return bitstatus;
}
 8000f3e:	f000 0001 	and.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	40021000 	.word	0x40021000

08000f48 <RCC_ClearFlag>:
  * @retval None
  */
void RCC_ClearFlag(void)
{
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= CSR_RMVF_Set;
 8000f48:	4a02      	ldr	r2, [pc, #8]	; (8000f54 <RCC_ClearFlag+0xc>)
 8000f4a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000f4c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f50:	6253      	str	r3, [r2, #36]	; 0x24
 8000f52:	4770      	bx	lr
 8000f54:	40021000 	.word	0x40021000

08000f58 <RCC_GetITStatus>:
  ITStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 8000f58:	4b03      	ldr	r3, [pc, #12]	; (8000f68 <RCC_GetITStatus+0x10>)
 8000f5a:	689b      	ldr	r3, [r3, #8]
 8000f5c:	4218      	tst	r0, r3
    bitstatus = RESET;
  }

  /* Return the RCC_IT status */
  return  bitstatus;
}
 8000f5e:	bf14      	ite	ne
 8000f60:	2001      	movne	r0, #1
 8000f62:	2000      	moveq	r0, #0
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	40021000 	.word	0x40021000

08000f6c <RCC_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 8000f6c:	4b01      	ldr	r3, [pc, #4]	; (8000f74 <RCC_ClearITPendingBit+0x8>)
 8000f6e:	7018      	strb	r0, [r3, #0]
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	4002100a 	.word	0x4002100a

08000f78 <memcpy>:
 8000f78:	4684      	mov	ip, r0
 8000f7a:	ea41 0300 	orr.w	r3, r1, r0
 8000f7e:	f013 0303 	ands.w	r3, r3, #3
 8000f82:	d149      	bne.n	8001018 <memcpy+0xa0>
 8000f84:	3a40      	subs	r2, #64	; 0x40
 8000f86:	d323      	bcc.n	8000fd0 <memcpy+0x58>
 8000f88:	680b      	ldr	r3, [r1, #0]
 8000f8a:	6003      	str	r3, [r0, #0]
 8000f8c:	684b      	ldr	r3, [r1, #4]
 8000f8e:	6043      	str	r3, [r0, #4]
 8000f90:	688b      	ldr	r3, [r1, #8]
 8000f92:	6083      	str	r3, [r0, #8]
 8000f94:	68cb      	ldr	r3, [r1, #12]
 8000f96:	60c3      	str	r3, [r0, #12]
 8000f98:	690b      	ldr	r3, [r1, #16]
 8000f9a:	6103      	str	r3, [r0, #16]
 8000f9c:	694b      	ldr	r3, [r1, #20]
 8000f9e:	6143      	str	r3, [r0, #20]
 8000fa0:	698b      	ldr	r3, [r1, #24]
 8000fa2:	6183      	str	r3, [r0, #24]
 8000fa4:	69cb      	ldr	r3, [r1, #28]
 8000fa6:	61c3      	str	r3, [r0, #28]
 8000fa8:	6a0b      	ldr	r3, [r1, #32]
 8000faa:	6203      	str	r3, [r0, #32]
 8000fac:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8000fae:	6243      	str	r3, [r0, #36]	; 0x24
 8000fb0:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8000fb2:	6283      	str	r3, [r0, #40]	; 0x28
 8000fb4:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8000fb6:	62c3      	str	r3, [r0, #44]	; 0x2c
 8000fb8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8000fba:	6303      	str	r3, [r0, #48]	; 0x30
 8000fbc:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8000fbe:	6343      	str	r3, [r0, #52]	; 0x34
 8000fc0:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8000fc2:	6383      	str	r3, [r0, #56]	; 0x38
 8000fc4:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8000fc6:	63c3      	str	r3, [r0, #60]	; 0x3c
 8000fc8:	3040      	adds	r0, #64	; 0x40
 8000fca:	3140      	adds	r1, #64	; 0x40
 8000fcc:	3a40      	subs	r2, #64	; 0x40
 8000fce:	d2db      	bcs.n	8000f88 <memcpy+0x10>
 8000fd0:	3230      	adds	r2, #48	; 0x30
 8000fd2:	d30b      	bcc.n	8000fec <memcpy+0x74>
 8000fd4:	680b      	ldr	r3, [r1, #0]
 8000fd6:	6003      	str	r3, [r0, #0]
 8000fd8:	684b      	ldr	r3, [r1, #4]
 8000fda:	6043      	str	r3, [r0, #4]
 8000fdc:	688b      	ldr	r3, [r1, #8]
 8000fde:	6083      	str	r3, [r0, #8]
 8000fe0:	68cb      	ldr	r3, [r1, #12]
 8000fe2:	60c3      	str	r3, [r0, #12]
 8000fe4:	3010      	adds	r0, #16
 8000fe6:	3110      	adds	r1, #16
 8000fe8:	3a10      	subs	r2, #16
 8000fea:	d2f3      	bcs.n	8000fd4 <memcpy+0x5c>
 8000fec:	320c      	adds	r2, #12
 8000fee:	d305      	bcc.n	8000ffc <memcpy+0x84>
 8000ff0:	f851 3b04 	ldr.w	r3, [r1], #4
 8000ff4:	f840 3b04 	str.w	r3, [r0], #4
 8000ff8:	3a04      	subs	r2, #4
 8000ffa:	d2f9      	bcs.n	8000ff0 <memcpy+0x78>
 8000ffc:	3204      	adds	r2, #4
 8000ffe:	d008      	beq.n	8001012 <memcpy+0x9a>
 8001000:	07d2      	lsls	r2, r2, #31
 8001002:	bf1c      	itt	ne
 8001004:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8001008:	f800 3b01 	strbne.w	r3, [r0], #1
 800100c:	d301      	bcc.n	8001012 <memcpy+0x9a>
 800100e:	880b      	ldrh	r3, [r1, #0]
 8001010:	8003      	strh	r3, [r0, #0]
 8001012:	4660      	mov	r0, ip
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	2a08      	cmp	r2, #8
 800101a:	d313      	bcc.n	8001044 <memcpy+0xcc>
 800101c:	078b      	lsls	r3, r1, #30
 800101e:	d0b1      	beq.n	8000f84 <memcpy+0xc>
 8001020:	f010 0303 	ands.w	r3, r0, #3
 8001024:	d0ae      	beq.n	8000f84 <memcpy+0xc>
 8001026:	f1c3 0304 	rsb	r3, r3, #4
 800102a:	1ad2      	subs	r2, r2, r3
 800102c:	07db      	lsls	r3, r3, #31
 800102e:	bf1c      	itt	ne
 8001030:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8001034:	f800 3b01 	strbne.w	r3, [r0], #1
 8001038:	d3a4      	bcc.n	8000f84 <memcpy+0xc>
 800103a:	f831 3b02 	ldrh.w	r3, [r1], #2
 800103e:	f820 3b02 	strh.w	r3, [r0], #2
 8001042:	e79f      	b.n	8000f84 <memcpy+0xc>
 8001044:	3a04      	subs	r2, #4
 8001046:	d3d9      	bcc.n	8000ffc <memcpy+0x84>
 8001048:	3a01      	subs	r2, #1
 800104a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800104e:	f800 3b01 	strb.w	r3, [r0], #1
 8001052:	d2f9      	bcs.n	8001048 <memcpy+0xd0>
 8001054:	780b      	ldrb	r3, [r1, #0]
 8001056:	7003      	strb	r3, [r0, #0]
 8001058:	784b      	ldrb	r3, [r1, #1]
 800105a:	7043      	strb	r3, [r0, #1]
 800105c:	788b      	ldrb	r3, [r1, #2]
 800105e:	7083      	strb	r3, [r0, #2]
 8001060:	4660      	mov	r0, ip
 8001062:	4770      	bx	lr

08001064 <memset>:
 8001064:	b470      	push	{r4, r5, r6}
 8001066:	0784      	lsls	r4, r0, #30
 8001068:	d046      	beq.n	80010f8 <memset+0x94>
 800106a:	1e54      	subs	r4, r2, #1
 800106c:	2a00      	cmp	r2, #0
 800106e:	d041      	beq.n	80010f4 <memset+0x90>
 8001070:	b2cd      	uxtb	r5, r1
 8001072:	4603      	mov	r3, r0
 8001074:	e002      	b.n	800107c <memset+0x18>
 8001076:	1e62      	subs	r2, r4, #1
 8001078:	b3e4      	cbz	r4, 80010f4 <memset+0x90>
 800107a:	4614      	mov	r4, r2
 800107c:	f803 5b01 	strb.w	r5, [r3], #1
 8001080:	079a      	lsls	r2, r3, #30
 8001082:	d1f8      	bne.n	8001076 <memset+0x12>
 8001084:	2c03      	cmp	r4, #3
 8001086:	d92e      	bls.n	80010e6 <memset+0x82>
 8001088:	b2cd      	uxtb	r5, r1
 800108a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 800108e:	2c0f      	cmp	r4, #15
 8001090:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8001094:	d919      	bls.n	80010ca <memset+0x66>
 8001096:	4626      	mov	r6, r4
 8001098:	f103 0210 	add.w	r2, r3, #16
 800109c:	3e10      	subs	r6, #16
 800109e:	2e0f      	cmp	r6, #15
 80010a0:	f842 5c10 	str.w	r5, [r2, #-16]
 80010a4:	f842 5c0c 	str.w	r5, [r2, #-12]
 80010a8:	f842 5c08 	str.w	r5, [r2, #-8]
 80010ac:	f842 5c04 	str.w	r5, [r2, #-4]
 80010b0:	f102 0210 	add.w	r2, r2, #16
 80010b4:	d8f2      	bhi.n	800109c <memset+0x38>
 80010b6:	f1a4 0210 	sub.w	r2, r4, #16
 80010ba:	f022 020f 	bic.w	r2, r2, #15
 80010be:	f004 040f 	and.w	r4, r4, #15
 80010c2:	3210      	adds	r2, #16
 80010c4:	2c03      	cmp	r4, #3
 80010c6:	4413      	add	r3, r2
 80010c8:	d90d      	bls.n	80010e6 <memset+0x82>
 80010ca:	461e      	mov	r6, r3
 80010cc:	4622      	mov	r2, r4
 80010ce:	3a04      	subs	r2, #4
 80010d0:	2a03      	cmp	r2, #3
 80010d2:	f846 5b04 	str.w	r5, [r6], #4
 80010d6:	d8fa      	bhi.n	80010ce <memset+0x6a>
 80010d8:	1f22      	subs	r2, r4, #4
 80010da:	f022 0203 	bic.w	r2, r2, #3
 80010de:	3204      	adds	r2, #4
 80010e0:	4413      	add	r3, r2
 80010e2:	f004 0403 	and.w	r4, r4, #3
 80010e6:	b12c      	cbz	r4, 80010f4 <memset+0x90>
 80010e8:	b2c9      	uxtb	r1, r1
 80010ea:	441c      	add	r4, r3
 80010ec:	f803 1b01 	strb.w	r1, [r3], #1
 80010f0:	42a3      	cmp	r3, r4
 80010f2:	d1fb      	bne.n	80010ec <memset+0x88>
 80010f4:	bc70      	pop	{r4, r5, r6}
 80010f6:	4770      	bx	lr
 80010f8:	4614      	mov	r4, r2
 80010fa:	4603      	mov	r3, r0
 80010fc:	e7c2      	b.n	8001084 <memset+0x20>
 80010fe:	bf00      	nop
